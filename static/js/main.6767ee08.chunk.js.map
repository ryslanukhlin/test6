{"version":3,"sources":["types/RegisterStore.ts","hooks/useTypedSelector.ts","component/CustomElement/CustomBadge.tsx","store/reducers/RegisterReducer.ts","types/AuthStore.ts","store/reducers/AuthReducer.ts","types/UserStore.ts","store/reducers/UserReducer.ts","types/NotificationStore.ts","store/reducers/NotificationReducer.ts","store/reducers/PagesMetadataReducer.ts","hooks/useTypedDispatch.ts","component/UserLayout.tsx","config.ts","Socket.ts","pages/index.tsx","pages/404.tsx","component/FrendsPage.tsx","store/fetch/searchUser.ts","component/SearchFrendsItem.tsx","component/SearchFrends.tsx","pages/Frends.tsx","pages/Login.tsx","component/MessagesListItem.tsx","pages/Message.tsx","component/MessageItem.tsx","pages/Messages.tsx","pages/Notification.tsx","pages/Register.tsx","PrviateRouter.tsx","Router.tsx","App.tsx","store/fetch/authFetch.ts","store/action/AuthAction.ts","store/fetch/registerFetch.ts","store/action/RegistesAction.ts","store/fetch/userGetInfoFetch.ts","store/fetch/downloadAvatar.ts","store/action/UserAction.ts","store/action/index.ts","store/index.ts","index.tsx"],"names":["RegisterActionEnum","useTypedSelector","useSelector","CustomBadge","txt","count","collapsed","badgeKey","el","document","getElementById","nextSibling","firstChild","style","fontSize","id","className","AuthActionEnum","defaultStore","loading","fetchFailed","errors","success","UserActionEnum","defaultState","token","error","clearAuth","type","CLEAR_AUTH","NotificationActionEnum","isAuth","isError","user","isFailedDownloadAvatar","userGetInfo","payload","USER_GET_INFO","userGetInfoSuccess","USER_GET_INFO_SUCCESS","TPagesMetadataActionEnum","defautlState","NotificationCount","Number","localStorage","getItem","newFrends","NotificationMessages","JSON","parse","addNotification","isSaveLocalstorange","ADD_NOTIFICATION","setMessageNotification","SET_NOTIFICATION_MESSAGES","actionCreater","registerRequest","REGISTER_REQUEST","closeAlertSuccess","CLOSE_ALERT_SUCCESS","authRequest","isRememberMe","AUTH_REQUEST","closeAlertError","CLOSE_ALERT_ERROR","clearNotification","CLEAR_NOTIFICATION","addNewFrendNotification","NEW_FREND_NOTIFICATION","clearFrendNotification","CLEAR_FREND_NOTIFICATION","setCollepsed","SET_COLLEPSED","addMessageNotification","ADD_NOTIFICATION_MESSAGES","clearMessageNotification","CLEAR_NOTIFICATION_MESSAGES","userOutput","USER_OUTPUT","userDownloadAvatar","USER_DOWNLOAD_AVATAR","semoveFailedDownloadAvatar","REMOVE_FAILED_DOWNLOAD_AVATAR","useTypeDispatch","dispatch","useDispatch","bindActionCreators","Content","Layout","Sider","UserLayout","children","state","NotificationReducer","PagesMetadataReducer","collapsible","onCollapse","overflow","height","position","top","left","theme","mode","Item","icon","UserOutlined","to","TeamOutlined","BellOutlined","MessageOutlined","length","ServerPort","io","socketio","Title","Typography","HomePage","avatarInput","React","useRef","UserReducer","AuthReducer","message","onClose","closable","src","avatar","shape","size","onClick","current","click","UploadOutlined","onChange","e","formData","FormData","append","target","files","ref","display","nicname","level","email","emit","_id","danger","NotePage","FrendsPage","frends","dataSource","renderItem","frend","Meta","title","description","searchUser","userId","a","text","fetch","method","headers","body","stringify","response","json","data","SearchFrendsItem","useState","isAplication","setIsAplication","MyProfile","actions","disabled","requestFrends","some","person","frendId","bind","SearchFrends","users","setUsers","useEffect","onChangeSearch","value","placeholder","itemLayout","pagination","pageSize","Frends","Login","isRememmer","setIsRemember","password","logForm","setLogForm","onChangeForm","name","banner","prefix","MailOutlined","Password","LockOutlined","prev","MessagesListItem","isMy","setIsMy","frendInfo","setFrendInfo","find","author","content","backgroundColor","Message","frendRef","roomId","useLocation","pathname","split","messages","setMessages","man","on","messagesArrDb","map","marginTop","width","Search","enterButton","onSearch","MessageItem","room","router","useHistory","notificationMessage","setNotificationMessage","item","push","countNewMessage","Messages","rooms","bordered","Notification","removeItem","unreadNotificationAplicationFrends","newNotificationFrends","addFrend","applicationFrends","potontialFrend","newFrend","Register","RegisterReducer","repeatPassword","regForm","setRegForm","validateStatus","help","PrviateRouter","Component","component","auth","props","render","RouterPage","exact","path","App","toketRef","Router","authFetchData","authForm","getDataAuth","watcherAuthSaga","authRequsest","call","put","AUTH_ERROR","setItem","AUTH_SUCCESS","AUTH_FAILED","takeEvery","registerFetchData","registerForm","getDataRegister","watcherRegisterSaga","validErr","REGISTER_ERROR","REGISTER_SUCCESS","REGISTER_FAILED","userGetInfoFetch","Authorization","userDownloadAvatarFetch","status","Error","getUserData","watcherUserSaga","getUserAction","unreadMessages","SET_FREND_NOTIFICATION","USER_GET_INFO_ERROR","downloadAvatarAction","SET_FAILED_DOWNLOAD_AVATAR","rootSaga","all","globalReducer","combineReducers","action","String","copyNotificationsMessages","filter","setNotificationsMessages","forEach","messageDb","NotificationMessage","copyClearNotificationsMessages","sagaMiddleware","createSagaMiddleware","composedEnhancers","compose","applyMiddleware","store","createStore","run","ReactDOM"],"mappings":"iPAyBYA,E,gHCtBCC,G,OAAqDC,K,OCDrDC,EAKR,SAAC,GAAyC,IAAD,IAAtCC,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC3B,GAAc,IAAVF,EACA,OAAO,mCAAGD,IAId,IAAMI,EAAO,UAAGC,SAASC,eAAe,cAAgBH,UAA3C,iBAAG,EAAmDI,mBAAtD,aAAG,EAAgEC,WAShF,MARkB,kBAAPJ,IAEHA,EAAGK,MAAMC,SADTR,EACoB,MAEA,QAKxB,uBAAMS,GAAI,cAAgBR,EAAUS,UAAU,cAA9C,UACI,sBAAMA,UAAU,mBAAhB,SAAoCZ,IACpC,sBAAMY,UAAU,qBAAhB,SAAsCX,EAAQ,GAAK,MAAQA,Q,yBFA3DL,K,oCAAAA,E,oCAAAA,E,gCAAAA,E,kCAAAA,E,2CAAAA,M,KGZZ,ICCYiB,EDDNC,EAA+B,CACjCC,SAAS,EACTC,aAAa,EACbC,OAAQ,KACRC,SAAS,I,SCHDL,K,4BAAAA,E,4BAAAA,E,wBAAAA,E,0BAAAA,E,sCAAAA,E,yBAAAA,M,KCDZ,ICmBYM,EDnBNC,EAA2B,CAC7BL,SAAS,EACTM,MAAO,KACPC,OAAO,EACPN,aAAa,GA4CJO,EAAY,iBAAmB,CACxCC,KAAMX,EAAeY,c,SC9BbN,K,8BAAAA,E,yCAAAA,E,8CAAAA,E,0BAAAA,E,4CAAAA,E,wDAAAA,E,8DAAAA,E,mDAAAA,M,KClBZ,ICAYO,EDANN,EAA2B,CAC7BO,QAAQ,EACRC,SAAS,EACTC,KAAM,KACNd,SAAS,EACTe,wBAAwB,GAsBfC,EAAc,SAACC,GAAD,IAAkBjB,IAAlB,+DAA6D,CACpFS,KAAML,EAAec,cACrBD,UACAjB,YAGSmB,EAAqB,SAACF,GAAD,MAA0C,CACxER,KAAML,EAAegB,sBACrBH,Y,mBCnCQN,K,oCAAAA,E,gDAAAA,E,gDAAAA,E,wCAAAA,E,oDAAAA,E,sDAAAA,E,sDAAAA,E,2DAAAA,M,KCGZ,ICbKU,EDaCC,EAAmC,CACrCC,kBAAmBC,OAAOC,aAAaC,QAAQ,wBAA0B,EACzEC,UAAW,GACXC,qBAAsBC,KAAKC,MAAML,aAAaC,QAAQ,0BAA6B,IA8E1EK,EAAkB,eAC3Bd,EAD2B,uDACT,EAClBe,IAF2B,+DAGP,CACpBvB,KAAME,EAAuBsB,iBAC7BhB,UACAe,wBA0BSE,EAAyB,SAACjB,GAAD,MAAqD,CACvFR,KAAME,EAAuBwB,0BAC7BlB,a,SChICI,K,+BAAAA,M,KAUL,IAAMtB,EAAoC,CACtCZ,WAAW,GCOTiD,EAAgB,CAClBC,gBRc2B,SAACpB,GAAD,MAA+C,CAC1ER,KAAM5B,EAAmByD,iBACzBrB,YQfAsB,kBR8B6B,iBAA2B,CACxD9B,KAAM5B,EAAmB2D,sBQ9BzBC,YNcuB,SAACxB,EAAqByB,GAAtB,MAAgE,CACvFjC,KAAMX,EAAe6C,aACrB1B,UACAyB,iBMhBAE,gBN+B2B,iBAAyB,CACpDnC,KAAMX,EAAe+C,oBM/BrB7B,cACAe,kBACAe,kBFwF6B,iBAA2B,CACxDrC,KAAME,EAAuBoC,qBExF7BC,wBF6EmC,SAAC/B,GAAD,MAA4C,CAC/ER,KAAME,EAAuBsC,uBAC7BhC,YE9EAiC,uBF0FkC,iBAAgC,CAClEzC,KAAME,EAAuBwC,2BE1F7BC,aDFwB,iBAAsB,CAC9C3C,KAAMY,EAAyBgC,gBCE/BC,uBF4FkC,SAACrC,GAAD,MAAgD,CAClFR,KAAME,EAAuB4C,0BAC7BtC,YE7FAuC,yBFqGoC,SAACvC,GAAD,MAAkD,CACtFR,KAAME,EAAuB8C,4BAC7BxC,YEtGAiB,yBACAwB,WJoBsB,iBAAoB,CAC1CjD,KAAML,EAAeuD,cIpBrBnD,YACAoD,mBJsB8B,SAAC3C,EAAmBX,GAApB,MAA4D,CAC1FG,KAAML,EAAeyD,qBACrB5C,UACAX,UIxBAwD,2BJ+BsC,iBAAoC,CAC1ErD,KAAML,EAAe2D,iCI7BZC,EAAkB,WAC3B,IAAMC,EAAWC,cACjB,OAAOC,YAAmB/B,EAAe6B,IClCrCG,EAAmBC,IAAnBD,QAASE,EAAUD,IAAVC,MAqFFC,EAnF6C,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3D,EAAoD1F,GAChD,SAAC2F,GAAD,OAAWA,EAAMC,uBADbnD,EAAR,EAAQA,kBAAmBK,EAA3B,EAA2BA,qBAGnBzC,EAAcL,GAAiB,SAAC2F,GAAD,OAAWA,EAAME,wBAAhDxF,UACAiE,EAAiBY,IAAjBZ,aAER,OACI,eAAC,IAAD,CAAQvD,UAAU,SAAlB,UACI,eAACyE,EAAD,CACIM,aAAW,EACXzF,UAAWA,EACX0F,WAAYzB,EACZ1D,MAAO,CACHoF,SAAU,OACVC,OAAQ,QACRC,SAAU,SACVC,IAAK,EACLC,KAAM,GATd,UAWI,oBAAIrF,UAAU,QAAd,SAAuBV,EAAY,KAAO,kBAC1C,eAAC,IAAD,CAAMgG,MAAM,OAAOC,KAAK,SAAxB,UACI,cAAC,IAAKC,KAAN,CAAmBC,KAAM,cAACC,EAAA,EAAD,IAAzB,SACI,cAAC,IAAD,CAAMC,GAAG,IAAT,0DADW,KAGf,cAAC,IAAKH,KAAN,CAAmBC,KAAM,cAACG,EAAA,EAAD,IAAzB,SACI,cAAC,IAAD,CAAMD,GAAG,UAAT,oDADW,KAGf,cAAC,IAAKH,KAAN,CAEIC,KACInG,EACI,cAAC,EAAD,CACIC,SAAU,EACVD,UAAWA,EACXF,IAAK,cAACyG,EAAA,EAAD,IACLxG,MAAOqC,IAGX,cAACmE,EAAA,EAAD,IAXZ,SAcI,cAAC,IAAD,CAAMF,GAAG,gBAAT,SACI,cAAC,EAAD,CACIpG,SAAU,EACVD,UAAWA,EACXF,IAAK,qEACLC,MAAOC,EAAY,EAAIoC,OAlB3B,KAsBR,cAAC,IAAK8D,KAAN,CAEIC,KACInG,EACI,cAAC,EAAD,CACIC,SAAU,EACVD,UAAWA,EACXF,IAAK,cAAC0G,EAAA,EAAD,IACLzG,MAAO0C,EAAqBgE,SAGhC,cAACD,EAAA,EAAD,IAXZ,SAcI,cAAC,IAAD,CAAMH,GAAG,YAAT,SACI,cAAC,EAAD,CACIpG,SAAU,EACVD,UAAWA,EACXF,IAAK,yDACLC,MAAOC,EAAY,EAAIyC,EAAqBgE,YAlBhD,WAwBhB,cAAC,IAAD,CAAQ/F,UAAU,cAAlB,SACI,cAACuE,EAAD,CAASvE,UAAU,yBAAnB,SAA6C2E,U,uECzFhDqB,EAAqB,4BCMnBC,E,MAFwCC,GAASF,GCM1DG,EAAQC,IAAWD,MA8DVE,EA5DY,WACvB,IAAMC,EAAcC,IAAMC,OAAyB,MACnD,EAAyCvH,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,eAAnExF,EAAR,EAAQA,KAAMC,EAAd,EAAcA,uBACNT,EAAUxB,GAAiB,SAAC2F,GAAD,OAAWA,EAAM8B,eAA5CjG,MACR,EAAuE0D,IAA/DN,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,mBAAoBE,EAAxC,EAAwCA,2BAiBxC,OACI,gCACK/C,EACG,cAAC,IAAD,CACIN,KAAK,QACL+F,QAAQ,oLACRC,QAAS3C,EACT4C,UAAQ,IAEZ,KACJ,cAAC,IAAD,CACIC,IAAKd,EAAa,YAAb,OAA0B/E,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAM8F,QACrCC,MAAM,SACNC,KAAM,IACNxB,KAAM,cAACC,EAAA,EAAD,MAEV,cAAC,IAAD,CACIwB,QA3Ba,WAAO,IAAD,EAC3B,UAAAZ,EAAYa,eAAZ,SAAqBC,SA2BbpH,UAAU,mBACVyF,KAAM,cAAC4B,EAAA,EAAD,IAHV,uIAMA,uBACIC,SA7BW,SAACC,GACpB,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,SAAUH,EAAEI,OAAOC,MAAO,IAC1C7D,EAAmByD,EAAU5F,aAAaC,QAAQ,UAAYpB,IA2BtDoH,IAAKvB,EACL1F,KAAK,OACLf,MAAO,CAAEiI,QAAS,UAEtB,eAAC3B,EAAD,CAAOnG,UAAU,iBAAjB,gEAA4CiB,QAA5C,IAA4CA,OAA5C,EAA4CA,EAAM8G,WAClD,eAAC5B,EAAD,CAAOnG,UAAU,eAAegI,MAAO,EAAvC,oDACY/G,QADZ,IACYA,OADZ,EACYA,EAAMgH,SAElB,cAAC,IAAD,CAAQf,QA/CA,WACZrD,IACAoC,EAAGiC,KAAK,kBAAR,OAA2BjH,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAMkH,MA6CHvH,KAAK,UAAUwH,QAAM,EAA/C,gDChDGC,EAZY,WAGvB,OAFmBpJ,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,eAA7C1F,OAGJ,qCAEA,cAAC,EAAD,UACI,wC,SCyBGuH,GAhCc,WACzB,IAAQC,EAAWtJ,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,YAAYxF,QAAzDsH,OAER,OAAsB,IAAlBA,EAAOxC,OAAqB,KAG5B,qCACI,+FACA,cAAC,IAAD,CACIyC,WAAYD,EACZE,WAAY,SAACC,GAAD,OACR,cAAC,IAAKlD,KAAN,UACI,cAAC,IAAKA,KAAKmD,KAAX,CACI5B,OACI,cAAC,IAAD,CACID,IACI4B,EAAM3B,OACAf,EAAa,WAAa0C,EAAM3B,OAChC,oBAIlB6B,MAAOF,EAAMX,QACbc,YAAaH,EAAMT,iB,gDCzBlCa,GAAU,yCAAG,WAAOC,GAAP,gCAAAC,EAAA,6DAAuBC,EAAvB,+BAAsC,GAAtC,SACCC,MAAMlD,EAAa,cAAe,CACrDmD,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMrH,KAAKsH,UAAU,CAAEL,OAAMF,aANX,cAChBQ,EADgB,gBAQMA,EAASC,OARf,cAQhBC,EARgB,yBASfA,GATe,2CAAH,sDCmDRC,GAzC2B,SAAC,GAAc,IAAZzI,EAAW,EAAXA,KACzC,EAAwCsF,IAAMoD,UAAkB,GAAhE,oBAAOC,EAAP,KAAqBC,EAArB,KACcC,EAAc7K,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,eAAtDxF,KACAR,EAAUxB,GAAiB,SAAC2F,GAAD,OAAWA,EAAM8B,eAA5CjG,MACAU,EAAgBgD,IAAhBhD,YAQR,OACI,cAAC,IAAKqE,KAAN,CACIuE,QAAS,CACL,cAAC,IAAD,CACInJ,KAAK,OACLoJ,SACIJ,IAAY,OACZE,QADY,IACZA,OADY,EACZA,EAAWG,cAAcC,MAAK,SAACC,GAAD,OAAYA,EAAOhC,MAAQlH,EAAKkH,UAD9D,OAEA2B,QAFA,IAEAA,OAFA,EAEAA,EAAWvB,OAAO2B,MAAK,SAACC,GAAD,OAAYA,EAAOhC,MAAQlH,EAAKkH,QAE3DjB,QAhBC,SAAC6B,EAAgBqB,GAC9BnE,EAAGiC,KAAK,yBAA0Ba,EAAQqB,GAC1CP,GAAgB,GAChB1I,EAAYV,GAASmB,aAAaC,QAAQ,UAAW,IAavBwI,KAAK,KAAd,OAAoBP,QAApB,IAAoBA,OAApB,EAAoBA,EAAW3B,IAAMlH,EAAKkH,KAPvD,2GAFR,SAaI,cAAC,IAAK3C,KAAKmD,KAAX,CACI5B,OACI,cAAC,IAAD,CACID,IACI7F,EAAK8F,OAASf,EAAa,WAAa/E,EAAK8F,OAAS,oBAIlE6B,MAAO3H,EAAK8G,QACZc,YAAa5H,EAAKgH,WCRnBqC,GAhCgB,WAC3B,MAA0B/D,IAAMoD,WAAhC,oBAAOY,EAAP,KAAcC,EAAd,KACcV,EAAc7K,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,eAAtDxF,KAERsF,IAAMkE,WAAU,WACZ,wBAAC,6BAAAzB,EAAA,sEACsBF,GAAU,OAACgB,QAAD,IAACA,OAAD,EAACA,EAAW3B,KAD5C,OACSsB,EADT,OAEGe,EAASf,GAFZ,0CAAD,KAKD,IAEH,IAAMiB,EAAc,yCAAG,WAAOnD,GAAP,gBAAAyB,EAAA,sEACAF,GAAU,OAACgB,QAAD,IAACA,OAAD,EAACA,EAAW3B,IAAMZ,EAAEI,OAAOgD,OADrC,OACblB,EADa,OAEnBe,EAASf,GAFU,2CAAH,sDAKpB,OACI,qCACI,cAAC,KAAD,CAAOnC,SAAUoD,EAAgBE,YAAY,gEAAc3D,KAAK,UAChE,cAAC,IAAD,CACI4D,WAAW,aACXrC,WAAY+B,EACZO,WAAY,CACRC,SAAU,GAEdtC,WAAY,SAACxH,GAAD,OAAU,cAAC,GAAD,CAAkBA,KAAMA,WCpB/C+J,GAVU,WACrB,OACI,qCACI,cAAC,GAAD,IACA,uBACA,cAAC,GAAD,Q,iDC8DGC,I,OA9DS,WACpB,IAAQvK,EAAUzB,GAAiB,SAAC2F,GAAD,OAAWA,EAAM8B,eAA5ChG,MACR,EAAyCyD,IAAjCvB,EAAR,EAAQA,YAAaG,EAArB,EAAqBA,gBACrB,EAAoCwD,IAAMoD,UAAkB,GAA5D,oBAAOuB,EAAP,KAAmBC,EAAnB,KACA,EAA8B5E,IAAMoD,SAAqB,CACrD1B,MAAO,GACPmD,SAAU,KAFd,oBAAOC,EAAP,KAAgBC,EAAhB,KAKMC,EAAe,SAAChE,GAClB+D,EAAW,2BAAKD,GAAN,mBAAgB9D,EAAEI,OAAO6D,KAAOjE,EAAEI,OAAOgD,UAOvD,OACI,qBAAK3K,UAAU,UAAf,SACI,eAAC,KAAD,CAAMA,UAAU,OAAhB,UACKU,EACG,cAAC,IAAD,CACIiG,QAAQ,qLACR/F,KAAK,QACL6K,QAAQ,EACR5E,UAAU,EACVD,QAAS7D,IACb,KACJ,cAAC,KAAKyC,KAAN,UACI,cAAC,KAAD,CACIkG,OAAQ,cAACC,GAAA,EAAD,IACRf,YAAY,iCACZY,KAAK,QACLb,MAAOU,EAAQpD,MACfX,SAAUiE,MAGlB,cAAC,KAAK/F,KAAN,UACI,cAAC,KAAMoG,SAAP,CACIF,OAAQ,cAACG,GAAA,EAAD,IACRjB,YAAY,uCACZY,KAAK,WACLb,MAAOU,EAAQD,SACf9D,SAAUiE,MAGlB,cAAC,KAAK/F,KAAN,UACI,cAAC,KAAD,CAAU8B,SAAU6D,EAAcd,KAAK,MAAM,SAACyB,GAAD,OAAWA,KAAxD,+FAIJ,eAAC,KAAKtG,KAAN,WACI,cAAC,IAAD,CAAQxF,UAAU,MAAMY,KAAK,UAAUsG,QAvClC,WACjBtE,EAAYyI,EAASH,IAsCT,4CADJ,sBAIQ,cAAC,IAAD,CAAMvF,GAAG,YAAT,oI,mBClBToG,GAnC2B,SAAC,GAAiB,IAAfpF,EAAc,EAAdA,QACzC,EAAwBJ,IAAMoD,WAA9B,oBAAOqC,EAAP,KAAaC,EAAb,KACA,EAAkC1F,IAAMoD,WAAxC,oBAAOuC,EAAP,KAAkBC,EAAlB,KACQlL,EAAShC,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,eAA3CxF,KAUR,OARAsF,IAAMkE,WAAU,YACJ,OAAJxJ,QAAI,IAAJA,OAAA,EAAAA,EAAMkH,OAAQxB,EAAQ1F,MACtBgL,GAAQ,GACRE,EAAY,OAAClL,QAAD,IAACA,OAAD,EAACA,EAAMsH,OAAO6D,MAAK,SAAC1D,GAAD,OAAWA,EAAMP,MAAQxB,EAAQ1F,UAC7DgL,GAAQ,KAEhB,IAGC,cAAC,KAAD,CACII,OAAQL,EAAI,OAAG/K,QAAH,IAAGA,OAAH,EAAGA,EAAM8G,QAAT,OAAmBmE,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAWnE,QAC1CuE,QAAS,4BAAI3F,EAAQsC,OACrBpJ,MAAO,CAAE0M,gBAAiBP,EAAO,YAAc,SAC/CjF,OACI,cAAC,IAAD,CACID,IACIkF,GACU,OAAJ/K,QAAI,IAAJA,OAAA,EAAAA,EAAM8F,QACFf,EAAa,WAAa/E,EAAK8F,OAC/B,oBACK,OAATmF,QAAS,IAATA,OAAA,EAAAA,EAAWnF,QACXf,EAAa,WAAakG,EAAUnF,OACpC,wBCyCfyF,GAnEW,WACtB,IAAMC,EAAWlG,IAAMC,SACjBkG,EAASC,cAAcC,SAASC,MAAM,KAAK,GACjD,EAAgCtG,IAAMoD,SAAsB,IAA5D,oBAAOmD,EAAP,KAAiBC,EAAjB,KACQzN,EAAcL,GAAiB,SAAC2F,GAAD,OAAWA,EAAME,wBAAhDxF,UACAyC,EAAyB9C,GAAiB,SAAC2F,GAAD,OAAWA,EAAMC,uBAA3D9C,qBACAd,EAAShC,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,eAA3CxF,KACA0C,EAA6BQ,IAA7BR,yBAER4C,IAAMkE,WAAU,WACZ,IAAM/B,EAAK,OAAGzH,QAAH,IAAGA,OAAH,EAAGA,EAAMsH,OAAO6D,MAAK,SAACY,GAAD,OAASA,EAAI7E,OAAJ,OAAYlH,QAAZ,IAAYA,OAAZ,EAAYA,EAAMkH,QAC3DsE,EAAStF,QAAUuB,IAEpB,IAEHnC,IAAMkE,WAAU,WAEZ,OADAxE,EAAGiC,KAAK,4BAA6BwE,EAArC,OAA6CzL,QAA7C,IAA6CA,OAA7C,EAA6CA,EAAMkH,KAC5C,WACH4E,EAAY,IACZ9G,EAAGiC,KAAK,mBAAR,OAA4BjH,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAMkH,QAGvC,IAEH5B,IAAMkE,WAAU,WACZxE,EAAGgH,GAAG,wBAAwB,SAACC,GAC3BH,EAAYG,QAEjB,IAEH3G,IAAMkE,WAAU,WACZxE,EAAGgH,GAAG,0BAA0B,SAACC,GAC7BH,EAAYG,QAEjB,IAEH3G,IAAMkE,WAAU,WACZ9G,EAAyB+I,KAE1B,CAAC3K,EAAqBgE,SAMzB,OACI,qCACyB,IAApB+G,EAAS/G,OACJ+G,EAASK,KAAI,SAACxG,GAAD,OACT,cAAC,GAAD,CAAoCA,QAASA,GAAtBA,EAAQwB,QAEnC,KACN,qBAAKtI,MAAO,CAAEuN,UAAW,UACzB,qBACIpN,UAAU,wBACVH,MAAO,CAAEwN,MAAM,eAAD,OAAiB/N,EAAY,IAAM,IAAnC,QAFlB,SAGI,cAAC,KAAMgO,OAAP,CACI1C,YAAY,oGACZ3D,KAAK,QACLsG,YAAY,yDACZC,SAnBI,SAAC7G,GAAqB,IAAD,EACrCV,EAAGiC,KAAK,uBAAwBwE,EAAhC,OAAwCzL,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAMkH,IAAKxB,EAAnD,UAA4D8F,EAAStF,eAArE,aAA4D,EAAkBgB,cCWvEsF,I,OAnDsB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC9BjB,EAAWlG,IAAMC,SACjBmH,EAASC,cACf,EAAsDrH,IAAMoD,WAA5D,oBAAOkE,EAAP,KAA4BC,EAA5B,KACQ7M,EAAShC,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,eAA3CxF,KACAc,EAAyB9C,GAAiB,SAAC2F,GAAD,OAAWA,EAAMC,uBAA3D9C,qBAERwE,IAAMkE,WAAU,WACZ,IAAM/B,EAAQgF,EAAKnD,MAAM6B,MAAK,SAACY,GAAD,OAASA,EAAI7E,OAAJ,OAAYlH,QAAZ,IAAYA,OAAZ,EAAYA,EAAMkH,QACzDsE,EAAStF,QAAUuB,IAEpB,IAEHnC,IAAMkE,WAAU,WACZ,IAAMoD,EAAsB9L,EAAqBqK,MAAK,SAAC2B,GAAD,OAAUA,EAAKrB,SAAWgB,EAAKvF,OACjF0F,GAAqBC,EAAuBD,KAEjD,CAAC9L,IAMJ,MAAgC,qBAArB0K,EAAStF,QAAgC,KAGhD,cAAC,IAAK3B,KAAN,CACI0B,QARU,WACdyG,EAAOK,KAAK,aAAeN,EAAKvF,MAQ5BnI,UAAU,cACV+J,QAAS,CACL8D,GAA+D,IAAxCA,EAAoBI,gBACvC,sBAAKjO,UAAU,mBAAf,qBAAoC6N,QAApC,IAAoCA,OAApC,EAAoCA,EAAqBI,mBACzD,MANZ,SAQI,cAAC,IAAKzI,KAAKmD,KAAX,CACI5B,OACI,cAAC,IAAD,CACID,IACI2F,EAAStF,QAAQJ,OACXf,EAAa,WAAayG,EAAStF,QAAQJ,OAC3C,oBAIlB6B,MAAO6D,EAAStF,QAAQY,QACxBc,YAAa4D,EAAStF,QAAQc,YC9C/BiG,GARY,WACvB,IAAQC,EAAUlP,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,YAAYxF,QAAxDkN,MAER,OAAqB,IAAjBA,EAAMpI,OAAqB,4OAExB,cAAC,IAAD,CAAMqI,UAAQ,EAAC5F,WAAY2F,EAAO1F,WAAY,SAACiF,GAAD,OAAU,cAAC,GAAD,CAAaA,KAAMA,QC2FvEW,GA9FgB,WAC3B,IAAQpN,EAAShC,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,eAA3CxF,KACAa,EAAc7C,GAAiB,SAAC2F,GAAD,OAAWA,EAAMC,uBAAhD/C,UACR,EAAsDqC,IAA9ClB,EAAR,EAAQA,kBAAmBI,EAA3B,EAA2BA,uBAE3BkD,IAAMkE,WAAU,WASZ,OARAxH,IACArB,aAAa0M,WAAW,sBACpBrN,EAAMsN,mCAAoCxI,OAAS,GACnDE,EAAGiC,KAAK,kDAAR,OAA2DjH,QAA3D,IAA2DA,OAA3D,EAA2DA,EAAMkH,KAEjElH,EAAMuN,sBAAuBzI,OAAS,GACtCE,EAAGiC,KAAK,qCAAR,OAA8CjH,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAMkH,KAEjD,WACH9E,OAGL,IAEH,IAAMoL,EAAQ,yCAAG,WAAOrE,GAAP,UAAApB,EAAA,sDACb/C,EAAGiC,KAAK,iBAAR,OAA0BjH,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAMkH,IAAKiC,GADxB,2CAAH,sDAId,OACI,qCACwC,KAA/B,OAAJnJ,QAAI,IAAJA,OAAA,EAAAA,EAAMyN,kBAAkB3I,SAAqC,IAArBjE,EAAUiE,OAC/C,uHACA,KACgC,KAA/B,OAAJ9E,QAAI,IAAJA,OAAA,EAAAA,EAAMyN,kBAAkB3I,QACrB,qCACI,wHACA,cAAC,IAAD,CACI8E,WAAW,aACXrC,WAAU,OAAEvH,QAAF,IAAEA,OAAF,EAAEA,EAAMyN,kBAClBjG,WAAY,SAACkG,GAAD,OACR,cAAC,IAAKnJ,KAAN,CACIuE,QAAS,CACL,cAAC,IAAD,CACInJ,KAAK,OACLsG,QAASuH,EAASpE,KAAK,KAAMsE,EAAexG,KAFhD,mIAFR,SAQI,cAAC,IAAK3C,KAAKmD,KAAX,CACI5B,OACI,cAAC,IAAD,CACID,KACkB,OAAd6H,QAAc,IAAdA,OAAA,EAAAA,EAAgB5H,QACVf,EACA,YADA,OAEA2I,QAFA,IAEAA,OAFA,EAEAA,EAAgB5H,QAChB,oBAIlB6B,MAAO+F,EAAe5G,QACtBc,YAAa8F,EAAe1G,gBAMhD,KACkB,IAArBnG,EAAUiE,OACP,qCACI,yKACA,cAAC,IAAD,CACI8E,WAAW,aACXrC,WAAY1G,EACZ2G,WAAY,SAACmG,GAAD,OACR,cAAC,IAAKpJ,KAAN,UACI,cAAC,IAAKA,KAAKmD,KAAX,CACI5B,OACI,cAAC,IAAD,CACID,KACY,OAAR8H,QAAQ,IAARA,OAAA,EAAAA,EAAU7H,QACJf,EAAa,YAAb,OAA0B4I,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAU7H,QACpC,oBAIlB6B,MAAOgG,EAAS7G,QAChBc,YAAa+F,EAAS3G,gBAM1C,SCDD4G,I,OAtFY,WACvB,MAA4B5P,GAAiB,SAAC2F,GAAD,OAAWA,EAAMkK,mBAAtDzO,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAChB,EAA+C6D,IAAvC3B,EAAR,EAAQA,gBAAiBE,EAAzB,EAAyBA,kBACzB,EAA8B6D,IAAMoD,SAAwB,CACxD5B,QAAS,GACTE,MAAO,GACPmD,SAAU,GACV2D,eAAgB,KAJpB,oBAAOC,EAAP,KAAgBC,EAAhB,KAOM1D,EAAe,SAAChE,GAClB0H,EAAW,2BAAKD,GAAN,mBAAgBzH,EAAEI,OAAO6D,KAAOjE,EAAEI,OAAOgD,UAOvD,OACI,qBAAK3K,UAAU,UAAf,SACI,eAAC,KAAD,CAAMA,UAAU,OAAhB,UACKM,EACG,cAAC,IAAD,CACIqG,QAAQ,+IACR/F,KAAK,UACL6K,QAAQ,EACR5E,UAAU,EACVD,QAAS,WACLlE,OAER,KACJ,cAAC,KAAK8C,KAAN,CACI0J,gBAAsB,OAAN7O,QAAM,IAANA,OAAA,EAAAA,EAAQ0H,SAAU,QAAU,UAC5CoH,KAAI,OAAE9O,QAAF,IAAEA,OAAF,EAAEA,EAAQ0H,QAFlB,SAGI,cAAC,KAAD,CACIyD,KAAK,UACLb,MAAOqE,EAAQjH,QACfT,SAAUiE,EACVG,OAAQ,cAAChG,EAAA,EAAD,IACRkF,YAAY,qCAGpB,cAAC,KAAKpF,KAAN,CACI0J,gBAAsB,OAAN7O,QAAM,IAANA,OAAA,EAAAA,EAAQ4H,OAAQ,QAAU,UAC1CkH,KAAI,OAAE9O,QAAF,IAAEA,OAAF,EAAEA,EAAQ4H,MAFlB,SAGI,cAAC,KAAD,CACIuD,KAAK,QACLb,MAAOqE,EAAQ/G,MACfX,SAAUiE,EACVG,OAAQ,cAACC,GAAA,EAAD,IACRf,YAAY,qCAGpB,cAAC,KAAKpF,KAAN,CACI0J,gBAAsB,OAAN7O,QAAM,IAANA,OAAA,EAAAA,EAAQ+K,UAAW,QAAU,UAC7C+D,KAAI,OAAE9O,QAAF,IAAEA,OAAF,EAAEA,EAAQ+K,SAFlB,SAGI,cAAC,KAAMQ,SAAP,CACIJ,KAAK,WACLb,MAAOqE,EAAQ5D,SACf9D,SAAUiE,EACVG,OAAQ,cAACG,GAAA,EAAD,IACRjB,YAAY,2CAGpB,cAAC,KAAKpF,KAAN,CACI0J,gBAAsB,OAAN7O,QAAM,IAANA,OAAA,EAAAA,EAAQ0O,gBAAiB,QAAU,UACnDI,KAAI,OAAE9O,QAAF,IAAEA,OAAF,EAAEA,EAAQ0O,eAFlB,SAGI,cAAC,KAAMnD,SAAP,CACIJ,KAAK,iBACLb,MAAOqE,EAAQD,eACfzH,SAAUiE,EACVG,OAAQ,cAACG,GAAA,EAAD,IACRjB,YAAY,kGAGpB,eAAC,KAAKpF,KAAN,WACI,cAAC,IAAD,CAAQxF,UAAU,MAAMY,KAAK,UAAUsG,QA9DlC,WACjB1E,EAAgBwM,IA6DJ,0HADJ,sBAIQ,cAAC,IAAD,CAAMrJ,GAAG,SAAT,sD,kCC1ETyJ,GAJwB,SAAC,GAAD,IAAcC,EAAd,EAAGC,UAAsBC,EAAzB,EAAyBA,KAASC,EAAlC,0BACnC,cAAC,IAAD,CAAOC,OAAQ,kBAAgB,IAATF,EAAiB,cAAC,IAAD,CAAU5J,GAAG,WAAc,cAAC0J,EAAD,eAAeG,QCiCtEE,GA9Bc,WACzB,IAAQ3O,EAAW9B,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,eAA7C1F,OAER,OACI,eAAC,IAAD,WACI,cAAC,GAAD,CAAewO,KAAMxO,EAAQ4O,OAAK,EAACC,KAAK,IAAIN,UAAWjJ,IACvD,cAAC,GAAD,CAAekJ,KAAMxO,EAAQ4O,OAAK,EAACC,KAAK,UAAUN,UAAWtE,KAC7D,cAAC,GAAD,CAAeuE,KAAMxO,EAAQ4O,OAAK,EAACC,KAAK,gBAAgBN,UAAWjB,KACnE,cAAC,GAAD,CAAekB,KAAMxO,EAAQ4O,OAAK,EAACC,KAAK,YAAYN,UAAWpB,KAC/D,cAAC,GAAD,CACIqB,KAAMxO,EACN4O,OAAK,EACLC,KAAK,2BACLN,UAAW9C,KAEf,cAAC,IAAD,CACImD,OAAK,EACLC,KAAK,SACLN,UAAW,kBAAOvO,EAAS,cAAC,IAAD,CAAU4E,GAAG,MAAS,cAAC,GAAD,OAErD,cAAC,IAAD,CACIgK,OAAK,EACLC,KAAK,YACLN,UAAW,kBAAOvO,EAAS,cAAC,IAAD,CAAU4E,GAAG,MAAS,cAAC,GAAD,OAErD,cAAC,IAAD,CAAOiK,KAAK,IAAIN,UAAWjH,QCwCxBwH,GArEO,WAClB,MAA4B5Q,GAAiB,SAAC2F,GAAD,OAAWA,EAAM6B,eAAtD1F,EAAR,EAAQA,OAAQZ,EAAhB,EAAgBA,QACRM,EAAUxB,GAAiB,SAAC2F,GAAD,OAAWA,EAAM8B,eAA5CjG,MACFqP,EAAWvJ,IAAMC,OAAsB/F,GAC7C,EACI0D,IADIhD,EAAR,EAAQA,YAAae,EAArB,EAAqBA,gBAAiBiB,EAAtC,EAAsCA,wBAAyBM,EAA/D,EAA+DA,uBAkD/D,OA/CIhD,IAAOqP,EAAS3I,QAAU1G,GAE9B8F,IAAMkE,WAAU,WACZtJ,EAAYV,GAASmB,aAAaC,QAAQ,YAE3C,IAEH0E,IAAMkE,WAAU,WACZxE,EAAGgH,GAAG,+BAA+B,WACjC/K,IACAf,EAAY2O,EAAS3I,SAAWvF,aAAaC,QAAQ,UAAW,QAGrE,IAEH0E,IAAMkE,WAAU,WACZxE,EAAGgH,GAAG,+BAA+B,SAACvE,GAClCxG,IACAiB,EAAwBuF,GACxBvH,EAAY2O,EAAS3I,SAAWvF,aAAaC,QAAQ,UAAW,QAGrE,IAEH0E,IAAMkE,WAAU,WACZxE,EAAGgH,GAAG,wCAAwC,SAACP,GAC3CjJ,EAAuBiJ,GACvBvL,EAAY2O,EAAS3I,SAAWvF,aAAaC,QAAQ,UAAW,QAGrE,IAEH0E,IAAMkE,WAAU,WACZxE,EAAGgH,GAAG,0BAA0B,WAC5B9L,EAAY2O,EAAS3I,SAAWvF,aAAaC,QAAQ,UAAW,QAGrE,IAEH0E,IAAMkE,WAAU,WACZxE,EAAGgH,GAAG,0BAA0B,WAC5B9L,EAAY2O,EAAS3I,SAAWvF,aAAaC,QAAQ,UAAW,QAGrE,IAGC1B,EAAgB,6BAGhB,cAAC,IAAD,UACKY,EACG,cAAC,EAAD,UACI,cAACgP,GAAD,MAGJ,cAACA,GAAD,O,mBCrEHC,GAAa,yCAAG,WAAOC,GAAP,kBAAAjH,EAAA,sEACFE,MAAMlD,EAAa,SAAU,CAChDmD,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMrH,KAAKsH,UAAU2G,KANA,cACnB1G,EADmB,gBAQcA,EAASC,OARvB,cAQnBC,EARmB,yBASlBA,GATkB,2CAAH,sD,aCGhByG,I,aAcOC,IAdjB,SAAUD,GAAYE,GAAtB,wEAEyC,OAFzC,kBAE+CC,aAAKL,GAAc3F,KAAK,KAAM+F,EAAahP,UAF1F,YAEcqI,EAFd,QAGiB/I,MAHjB,gBAGwB,OAHxB,SAG8B4P,a5BuCc,CACxC1P,KAAMX,EAAesQ,a4B3CzB,8BAMY,OADIH,EAAavN,cAAcjB,aAAa4O,QAAQ,QAAS/G,EAAKhJ,OAL9E,UAMkB6P,c5B+BUlP,E4B/BMqI,EAAKhJ,M5B+BwB,CAC3DG,KAAMX,EAAewQ,aACrBrP,a4BvCJ,QAOY,OAPZ,UAOkBkP,aAAInP,EAAYsI,EAAKhJ,QAPvC,gCAUQ,OAVR,oCAUc6P,a5BoCgC,CAC1C1P,KAAMX,EAAeyQ,c4B/CzB,kC5BqC2B,IAACtP,I4BrC5B,kBAcO,SAAU+O,KAAV,kEACH,OADG,SACGQ,aAAU1Q,EAAe6C,aAAcoN,IAD1C,wC,aCjBMU,GAAiB,yCAAG,WAC7BC,GAD6B,kBAAA7H,EAAA,sEAGNE,MAAMlD,EAAa,YAAa,CACnDmD,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMrH,KAAKsH,UAAUuH,KARI,cAGvBtH,EAHuB,gBAUmBA,EAASC,OAV5B,cAUvBC,EAVuB,yBAWtBA,GAXsB,2CAAH,sD,aCSpBqH,I,aAwBOC,IAxBjB,SAAUD,GACNtO,GADJ,wEAW6E,OAX7E,kBAWmF6N,aACvEO,GAAkBvG,KAAK,KAAM7H,EAAgBpB,UAZzD,YAWcqI,EAXd,QAciBuH,SAdjB,gBAeY,OAfZ,SAekBV,chCiBYlP,EgCjBMqI,EAAKpJ,OhCiB2B,CAChEO,KAAM5B,EAAmBiS,eACzB7P,agClCJ,8BAiBY,OAjBZ,UAiBkBkP,ahCWsC,CACpD1P,KAAM5B,EAAmBkS,mBgC7B7B,gCAoBQ,OApBR,oCAoBcZ,ahCiBwC,CAClD1P,KAAM5B,EAAmBmS,kBgCtC7B,kChCgC6B,IAAC/P,IgChC9B,kBAwBO,SAAU2P,KAAV,kEACH,OADG,SACGJ,aAAU3R,EAAmByD,iBAAkBqO,IADlD,wCClCA,IAAMM,GAAgB,yCAAG,WAAO3Q,GAAP,kBAAAuI,EAAA,sEACLE,MAAMlD,EAAa,QAAS,CAC/CmD,OAAQ,MACRC,QAAS,CACLiI,cAAe,UAAY5Q,KAJP,cACtB8I,EADsB,gBAOFA,EAASC,OAPP,cAOtBC,EAPsB,yBAQrBA,GARqB,2CAAH,sDCAhB6H,GAAuB,yCAAG,WAAO9J,EAAoB/G,GAA3B,kBAAAuI,EAAA,sEACZE,MAAMlD,EAAa,gBAAiB,CACvDmD,OAAQ,OACRC,QAAS,CACLiI,cAAe,UAAY5Q,GAE/B4I,KAAM7B,IANyB,UAQX,OAPlB+B,EAD6B,QAQtBgI,OARsB,sBAQA,IAAIC,MARJ,uBASTjI,EAASC,OATA,cAS7BC,EAT6B,yBAU5BA,GAV4B,2CAAH,wD,aCe1BgI,I,aAmBA5N,I,aAKAE,I,aAUO2N,IAlCjB,SAAUD,GAAYE,GAAtB,wEAE4B,OAF5B,kBAEkCtB,aAAKe,GAAiB/G,KAAK,KAAMsH,EAAcvQ,UAFjF,OAGQ,OADMqI,EAFd,gBAGc6G,aAAIhP,EAAmBmI,IAHrC,YAIYA,EAAKmI,eAAe7L,OAAS,GAJzC,gBAKY,OALZ,SAKkBuK,aAAIjO,EAAuBoH,EAAKmI,iBALlD,YAOYnI,EAAK8E,mCAAmCxI,OAAS,GAP7D,iBAQY,OARZ,UAQkBuK,aAAIpO,EAAgBuH,EAAK8E,mCAAmCxI,QAAQ,IARtF,aAUY0D,EAAK+E,sBAAsBzI,OAAS,GAVhD,iBAWY,OAXZ,UAWkBuK,c7BmFsBlP,E6BnFMqI,EAAK+E,sB7BmFqC,CACpF5N,KAAME,EAAuB+Q,uBAC7BzQ,a6BhGJ,QAaYuQ,EAAcxR,SAAS8F,EAAGiC,KAAK,iBAAkBuB,EAAKtB,KAblE,wBAeQ,OAfR,oCAecmI,a/BmB4C,CACtD1P,KAAML,EAAeuR,sB+BnCzB,kC7B8FuC,IAAC1Q,I6B9FxC,kBAmBA,SAAUyC,KAAV,kEAEI,OADAjC,aAAa0M,WAAW,SAD5B,SAEUgC,aAAI3P,KAFd,wCAKA,SAAUoD,GAAmBgO,GAA7B,4EAG4B,OAH5B,SAEgB3Q,EAAmB2Q,EAAnB3Q,QAASX,EAAUsR,EAAVtR,MAFzB,SAGkC4P,aAAKiB,GAAwBjH,KAAK,KAAMjJ,EAASX,IAHnF,OAIQ,OADMgJ,EAHd,gBAIc6G,aAAIhP,EAAmBmI,IAJrC,8BAMQ,OANR,mCAMc6G,a/BkB0D,CACpE1P,KAAML,EAAeyR,6B+BzBzB,sDAUO,SAAUN,KAAV,kEACH,OADG,SACGf,aAAUpQ,EAAec,cAAeoQ,IAD3C,OAEH,OAFG,SAEGd,aAAUpQ,EAAeuD,YAAaD,IAFzC,OAGH,OAHG,SAGG8M,aAAUpQ,EAAeyD,qBAAsBD,IAHlD,wC,iBC9CkBkO,IAAV,SAAUA,KAAV,kEACX,OADW,SACLC,aAAI,CAACnB,KAAuBZ,KAAmBuB,OAD1C,wCCIf,IACMS,GAAgBC,YAAgB,CAClC1L,YnCQuB,WAA4D,IAA3D9B,EAA0D,uDAAlDpE,EAAc6R,EAAoC,uCAClF,OAAQA,EAAOzR,MACX,KAAKX,EAAe6C,aAChB,OAAO,2BAAKtC,GAAZ,IAA0BL,SAAS,IACvC,KAAKF,EAAewQ,aAChB,OAAO,2BAAK7L,GAAZ,IAAmBzE,SAAS,EAAOM,MAAO4R,EAAOjR,UACrD,KAAKnB,EAAesQ,WAChB,OAAO,2BAAK3L,GAAZ,IAAmBzE,SAAS,EAAOO,OAAO,IAC9C,KAAKT,EAAeyQ,YAChB,OAAO,2BAAK9L,GAAZ,IAAmBzE,SAAS,EAAOC,aAAa,IACpD,KAAKH,EAAe+C,kBAChB,OAAO,2BAAK4B,GAAZ,IAAmBlE,OAAO,IAC9B,KAAKT,EAAeY,WAChB,OAAO,2BAAK+D,GAAZ,IAAmBnE,MAAO,OAC9B,QACI,OAAOmE,ImCtBfkK,gBrCO2B,WAAoE,IAAnElK,EAAkE,uDAA1D1E,EAAcmS,EAA4C,uCAC9F,OAAQA,EAAOzR,MACX,KAAK5B,EAAmByD,iBACpB,OAAO,2BAAKvC,GAAZ,IAA0BC,SAAS,IACvC,KAAKnB,EAAmBkS,iBACpB,OAAO,2BAAKtM,GAAZ,IAAmBtE,SAAS,EAAMH,SAAS,EAAOE,OAAQ,OAC9D,KAAKrB,EAAmBmS,gBACpB,OAAO,2BAAKvM,GAAZ,IAAmBxE,aAAa,EAAMD,SAAS,IACnD,KAAKnB,EAAmBiS,eACpB,OAAO,2BAAKrM,GAAZ,IAAmBzE,SAAS,EAAOE,OAAQgS,EAAOjR,UACtD,KAAKpC,EAAmB2D,oBACpB,OAAO,2BAAKiC,GAAZ,IAAmBtE,SAAS,IAChC,QACI,OAAOsE,IqCnBf6B,YjCQuB,WAA4D,IAA3D7B,EAA0D,uDAAlDpE,EAAc6R,EAAoC,uCAClF,OAAQA,EAAOzR,MACX,KAAKL,EAAec,cAChB,OAAO,2BAAKuD,GAAZ,IAAmBzE,QAASkS,EAAOlS,UACvC,KAAKI,EAAegB,sBAChB,OAAO,2BAAKqD,GAAZ,IAAmB7D,QAAQ,EAAME,KAAMoR,EAAOjR,QAASjB,SAAS,IACpE,KAAKI,EAAeuR,oBAChB,OAAO,2BAAKlN,GAAZ,IAAmB5D,SAAS,EAAMb,SAAS,IAC/C,KAAKI,EAAeuD,YAChB,OAAO,2BAAKc,GAAZ,IAAmB3D,KAAM,KAAMF,QAAQ,IAC3C,KAAKR,EAAeyR,2BAChB,OAAO,2BAAKpN,GAAZ,IAAmB1D,wBAAwB,IAC/C,KAAKX,EAAe2D,8BAChB,OAAO,2BAAKU,GAAZ,IAAmB1D,wBAAwB,IAC/C,QACI,OAAO0D,IiCtBfC,oB/BQ+B,WAGT,IAFtBD,EAEqB,uDAFbnD,EACR4Q,EACqB,uCACrB,OAAQA,EAAOzR,MACX,KAAKE,EAAuBsB,iBAOxB,OANIiQ,EAAOlQ,qBACPP,aAAa4O,QACT,qBACA8B,OAAO1N,EAAMlD,kBAAoB2Q,EAAOjR,UAGzC,2BAAKwD,GAAZ,IAAmBlD,kBAAmBkD,EAAMlD,kBAAoB2Q,EAAOjR,UAC3E,KAAKN,EAAuBsC,uBACxB,OAAO,2BAAKwB,GAAZ,IAAmB9C,UAAU,GAAD,mBAAM8C,EAAM9C,WAAZ,CAAuBuQ,EAAOjR,YAC9D,KAAKN,EAAuB+Q,uBACxB,OAAO,2BAAKjN,GAAZ,IAAmB9C,UAAWuQ,EAAOjR,UACzC,KAAKN,EAAuBoC,mBAExB,OADAtB,aAAa0M,WAAW,sBACjB,2BAAK1J,GAAZ,IAAmBlD,kBAAmB,IAC1C,KAAKZ,EAAuBwC,yBACxB,OAAO,2BAAKsB,GAAZ,IAAmB9C,UAAW,KAClC,KAAKhB,EAAuB4C,0BACxB,IAAMmK,EAAsBjJ,EAAM7C,qBAAqBqK,MACnD,SAAC2B,GAAD,OAAUA,EAAKrB,SAAW2F,EAAOjR,WAErC,GAAmC,qBAAxByM,EAAqC,CAC5CA,EAAoBI,kBACpB,IAAMsE,EAAyB,sBACxB3N,EAAM7C,qBAAqByQ,QAAO,SAACzE,GAAD,OAAUA,EAAKrB,SAAW2F,EAAOjR,YAD3C,CAE3ByM,IAMJ,OAJAjM,aAAa4O,QACT,uBACAxO,KAAKsH,UAAUiJ,IAEZ,2BACA3N,GADP,IAEI7C,qBAAsBwQ,IAG9B,IAAMA,EAAyB,sBACxB3N,EAAM7C,sBADkB,CAE3B,CAAE2K,OAAQ2F,EAAOjR,QAAS6M,gBAAiB,KAG/C,OADArM,aAAa4O,QAAQ,uBAAwBxO,KAAKsH,UAAUiJ,IACrD,2BACA3N,GADP,IAEI7C,qBAAsBwQ,IAE9B,KAAKzR,EAAuBwB,0BACxB,IAAMmQ,EAAoD,GAS1D,OARAJ,EAAOjR,QAAQsR,SAAQ,SAACC,GACpB,IAAMC,EAAsBH,EAAyBrG,MACjD,SAACwG,GAAD,OAAyBA,EAAoBlG,SAAWiG,EAAUjG,UAElEkG,EAAqBA,EAAoB3E,kBAEzCwE,EAAyBzE,KAAK,CAAEtB,OAAQiG,EAAUjG,OAAQuB,gBAAiB,OAE5E,2BAAKrJ,GAAZ,IAAmB7C,qBAAsB0Q,IAC7C,KAAK3R,EAAuB8C,4BACxB,IAAMiP,EAA8B,YAC7BjO,EAAM7C,qBAAqByQ,QAAO,SAACzE,GAAD,OAAUA,EAAKrB,SAAW2F,EAAOjR,YAM1E,OAJAQ,aAAa4O,QACT,uBACAxO,KAAKsH,UAAUuJ,IAEZ,2BAAKjO,GAAZ,IAAmB7C,qBAAsB8Q,IAC7C,QACI,OAAOjO,I+B9EfE,qB9BEgC,WAGT,IAFvBF,EAEsB,uDAFd1E,EACRmS,EACsB,uCACtB,OAAQA,EAAOzR,MACX,KAAKY,EAAyBgC,cAC1B,OAAO,2BAAKoB,GAAZ,IAAmBtF,WAAYsF,EAAMtF,YACzC,QACI,OAAOsF,M8BKbkO,GAAiBC,eACjBC,GAAoBC,IAAO,WAAP,GAAQC,YAAgBJ,KAAxB,OAtBI,KAwBjBK,GAAQC,YAAYjB,GAAea,IAChDF,GAAeO,IAAIpB,IC1BnBqB,IAAS7D,OACL,cAAC,IAAD,CAAU0D,MAAOA,GAAjB,SACI,cAAC,GAAD,MAEJ1T,SAASC,eAAe,W","file":"static/js/main.6767ee08.chunk.js","sourcesContent":["import { IRegisterForm } from './form/RegisterForm';\r\n\r\nexport interface TResponseRegisterErrorValid {\r\n    errors: TErrors;\r\n    validErr: boolean;\r\n}\r\n\r\nexport interface TResponseRegisterSuccess {\r\n    error: false;\r\n}\r\n\r\nexport interface TErrors {\r\n    nicname?: string;\r\n    email?: string;\r\n    password?: string;\r\n    repeatPassword?: string;\r\n}\r\n\r\nexport type TRegisterState = {\r\n    loading: boolean;\r\n    fetchFailed: boolean;\r\n    errors: TErrors | null;\r\n    success: boolean;\r\n};\r\n\r\nexport enum RegisterActionEnum {\r\n    REGISTER_REQUEST = 'REGISTER_REQUEST',\r\n    REGISTER_SUCCESS = 'REGISTER_SUCCESS',\r\n    REGISTER_ERROR = 'REGISTER_ERROR',\r\n    REGISTER_FAILED = 'REGISTER_FAILED',\r\n    CLOSE_ALERT_SUCCESS = 'CLOSE_ALERT_SUCCESS',\r\n}\r\n\r\nexport type TRegisterRequest = {\r\n    type: RegisterActionEnum.REGISTER_REQUEST;\r\n    payload: IRegisterForm;\r\n};\r\n\r\nexport type TRegisterSuccess = {\r\n    type: RegisterActionEnum.REGISTER_SUCCESS;\r\n};\r\n\r\nexport type TRegisterError = {\r\n    type: RegisterActionEnum.REGISTER_ERROR;\r\n    payload: TErrors;\r\n};\r\n\r\nexport type TRegisterFailed = {\r\n    type: RegisterActionEnum.REGISTER_FAILED;\r\n};\r\n\r\nexport type TCloseAlertSuccess = {\r\n    type: RegisterActionEnum.CLOSE_ALERT_SUCCESS;\r\n};\r\n\r\nexport type TRegisterAction =\r\n    | TRegisterRequest\r\n    | TRegisterSuccess\r\n    | TRegisterError\r\n    | TRegisterFailed\r\n    | TCloseAlertSuccess;\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { TRootState } from '../store';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<TRootState> = useSelector;\r\n","import React from 'react';\r\n\r\nexport const CustomBadge: React.FC<{\r\n    txt: React.ReactNode;\r\n    count: number;\r\n    collapsed: boolean;\r\n    badgeKey: number;\r\n}> = ({ txt, count, collapsed, badgeKey }) => {\r\n    if (count === 0) {\r\n        return <>{txt}</>;\r\n    }\r\n\r\n    // небольшой костыль чтобы адекватно отображалось badge\r\n    const el: any = document.getElementById('unicalniyId' + badgeKey)?.nextSibling?.firstChild;\r\n    if (typeof el === 'object') {\r\n        if (collapsed) {\r\n            el.style.fontSize = '0px';\r\n        } else {\r\n            el.style.fontSize = '14px';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <span id={'unicalniyId' + badgeKey} className=\"CustomBadge\">\r\n            <span className=\"CustomBadge__txt\">{txt}</span>\r\n            <span className=\"CustomBadge__count\">{count > 99 ? '99+' : count}</span>\r\n        </span>\r\n    );\r\n};\r\n","import { IRegisterForm } from '../../types/form/RegisterForm';\r\nimport {\r\n    RegisterActionEnum,\r\n    TErrors,\r\n    TRegisterAction,\r\n    TRegisterError,\r\n    TRegisterFailed,\r\n    TRegisterRequest,\r\n    TRegisterState,\r\n    TRegisterSuccess,\r\n    TCloseAlertSuccess,\r\n} from '../../types/RegisterStore';\r\n\r\nconst defaultStore: TRegisterState = {\r\n    loading: false,\r\n    fetchFailed: false,\r\n    errors: null,\r\n    success: false,\r\n};\r\n\r\nexport const RegisterReducer = (state = defaultStore, action: TRegisterAction): TRegisterState => {\r\n    switch (action.type) {\r\n        case RegisterActionEnum.REGISTER_REQUEST:\r\n            return { ...defaultStore, loading: true };\r\n        case RegisterActionEnum.REGISTER_SUCCESS:\r\n            return { ...state, success: true, loading: false, errors: null };\r\n        case RegisterActionEnum.REGISTER_FAILED:\r\n            return { ...state, fetchFailed: true, loading: false };\r\n        case RegisterActionEnum.REGISTER_ERROR:\r\n            return { ...state, loading: false, errors: action.payload };\r\n        case RegisterActionEnum.CLOSE_ALERT_SUCCESS:\r\n            return { ...state, success: false };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const registerRequest = (payload: IRegisterForm): TRegisterRequest => ({\r\n    type: RegisterActionEnum.REGISTER_REQUEST,\r\n    payload,\r\n});\r\nexport const registerSuccess = (): TRegisterSuccess => ({\r\n    type: RegisterActionEnum.REGISTER_SUCCESS,\r\n});\r\n\r\nexport const registerError = (payload: TErrors): TRegisterError => ({\r\n    type: RegisterActionEnum.REGISTER_ERROR,\r\n    payload,\r\n});\r\n\r\nexport const registerFailed = (): TRegisterFailed => ({\r\n    type: RegisterActionEnum.REGISTER_FAILED,\r\n});\r\n\r\nexport const closeAlertSuccess = (): TCloseAlertSuccess => ({\r\n    type: RegisterActionEnum.CLOSE_ALERT_SUCCESS,\r\n});\r\n","import { ILoginForm } from './form/LoginForm';\r\n\r\nexport type TAuthState = {\r\n    loading: boolean;\r\n    token: string | null;\r\n    error: boolean;\r\n    fetchFailed: boolean;\r\n};\r\n\r\nexport type TAuthResponseError = {\r\n    error: boolean;\r\n    token?: string;\r\n};\r\n\r\nexport enum AuthActionEnum {\r\n    AUTH_REQUEST = 'AUTH_REQUEST',\r\n    AUTH_SUCCESS = 'AUTH_SUCCESS',\r\n    AUTH_ERROR = 'AUTH_ERROR',\r\n    AUTH_FAILED = 'AUTH_FAILED',\r\n    CLOSE_ALERT_ERROR = 'CLOSE_ALERT_ERROR',\r\n    CLEAR_AUTH = 'CLEAR_AUTH',\r\n}\r\n\r\nexport type TAuthRequsest = {\r\n    type: AuthActionEnum.AUTH_REQUEST;\r\n    payload: ILoginForm;\r\n    isRememberMe: boolean;\r\n};\r\n\r\nexport type TAuthSuccess = {\r\n    type: AuthActionEnum.AUTH_SUCCESS;\r\n    payload: string;\r\n};\r\n\r\nexport type TAuthError = {\r\n    type: AuthActionEnum.AUTH_ERROR;\r\n};\r\n\r\nexport type TAuthFailed = {\r\n    type: AuthActionEnum.AUTH_FAILED;\r\n};\r\n\r\nexport type TCloseAlertError = {\r\n    type: AuthActionEnum.CLOSE_ALERT_ERROR;\r\n};\r\n\r\nexport type TClearAuth = {\r\n    type: AuthActionEnum.CLEAR_AUTH;\r\n};\r\n\r\nexport type TAuthAction =\r\n    | TAuthRequsest\r\n    | TAuthSuccess\r\n    | TAuthError\r\n    | TAuthFailed\r\n    | TCloseAlertError\r\n    | TClearAuth;\r\n","import {\r\n    AuthActionEnum,\r\n    TAuthAction,\r\n    TAuthError,\r\n    TAuthFailed,\r\n    TAuthRequsest,\r\n    TAuthState,\r\n    TAuthSuccess,\r\n    TClearAuth,\r\n    TCloseAlertError,\r\n} from '../../types/AuthStore';\r\nimport { ILoginForm } from '../../types/form/LoginForm';\r\n\r\nconst defaultState: TAuthState = {\r\n    loading: false,\r\n    token: null,\r\n    error: false,\r\n    fetchFailed: false,\r\n};\r\n\r\nexport const AuthReducer = (state = defaultState, action: TAuthAction): TAuthState => {\r\n    switch (action.type) {\r\n        case AuthActionEnum.AUTH_REQUEST:\r\n            return { ...defaultState, loading: true };\r\n        case AuthActionEnum.AUTH_SUCCESS:\r\n            return { ...state, loading: false, token: action.payload };\r\n        case AuthActionEnum.AUTH_ERROR:\r\n            return { ...state, loading: false, error: true };\r\n        case AuthActionEnum.AUTH_FAILED:\r\n            return { ...state, loading: false, fetchFailed: true };\r\n        case AuthActionEnum.CLOSE_ALERT_ERROR:\r\n            return { ...state, error: false };\r\n        case AuthActionEnum.CLEAR_AUTH:\r\n            return { ...state, token: null };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const authRequest = (payload: ILoginForm, isRememberMe: boolean): TAuthRequsest => ({\r\n    type: AuthActionEnum.AUTH_REQUEST,\r\n    payload,\r\n    isRememberMe,\r\n});\r\nexport const authSuccess = (payload: string): TAuthSuccess => ({\r\n    type: AuthActionEnum.AUTH_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const authError = (): TAuthError => ({\r\n    type: AuthActionEnum.AUTH_ERROR,\r\n});\r\n\r\nexport const authFailed = (): TAuthFailed => ({\r\n    type: AuthActionEnum.AUTH_FAILED,\r\n});\r\n\r\nexport const closeAlertError = (): TCloseAlertError => ({\r\n    type: AuthActionEnum.CLOSE_ALERT_ERROR,\r\n});\r\n\r\nexport const clearAuth = (): TClearAuth => ({\r\n    type: AuthActionEnum.CLEAR_AUTH,\r\n});\r\n","import { MessageBd } from './socket/messageBd';\r\n\r\nexport interface IRoom {\r\n    users: IUser[];\r\n    _id: string;\r\n}\r\n\r\nexport interface IUser {\r\n    _id: string;\r\n    nicname: string;\r\n    email: string;\r\n    password: string;\r\n    frends: IUser[];\r\n    requestFrends: IUser[];\r\n    applicationFrends: IUser[];\r\n    rooms: IRoom[];\r\n    unreadMessages: MessageBd[];\r\n    online: boolean;\r\n    unreadNotificationAplicationFrends: string[];\r\n    newNotificationFrends: IUser[];\r\n    __v: number;\r\n    avatar: string | undefined;\r\n}\r\n\r\nexport type TUserState = {\r\n    isAuth: boolean;\r\n    isError: boolean;\r\n    user: IUser | null;\r\n    loading: boolean;\r\n    isFailedDownloadAvatar: boolean;\r\n};\r\n\r\nexport enum UserActionEnum {\r\n    USER_GET_INFO = 'USER_GET_INFO',\r\n    USER_GET_INFO_ERROR = 'USER_GET_INO_ERROR',\r\n    USER_GET_INFO_SUCCESS = 'USER_GET_INFO_SUCCESS',\r\n    USER_OUTPUT = 'USER_OUTPUT',\r\n    USER_DOWNLOAD_AVATAR = 'USER_DOWNLOAD_AVATAR',\r\n    SET_FAILED_DOWNLOAD_AVATAR = 'SET_FAILED_DOWNLOAD_AVATAR',\r\n    REMOVE_FAILED_DOWNLOAD_AVATAR = 'REMOVE_FAILED_DOWNLOAD_AVATAR',\r\n    CLEAR_APLICATION_FRENDS = 'CLEAR_APLICATION_FRENDS',\r\n}\r\n\r\nexport type TUserGetInfo = {\r\n    type: UserActionEnum.USER_GET_INFO;\r\n    payload: string;\r\n    loading: boolean;\r\n};\r\nexport type TUserGetInfoSuccess = {\r\n    type: UserActionEnum.USER_GET_INFO_SUCCESS;\r\n    payload: IUser;\r\n};\r\nexport type TUserGetInfoError = {\r\n    type: UserActionEnum.USER_GET_INFO_ERROR;\r\n};\r\n\r\nexport type TUserOutput = {\r\n    type: UserActionEnum.USER_OUTPUT;\r\n};\r\n\r\nexport type TUserDownloadAvatar = {\r\n    type: UserActionEnum.USER_DOWNLOAD_AVATAR;\r\n    payload: FormData;\r\n    token: string;\r\n};\r\n\r\nexport type TSetFailedDownloadAvatar = {\r\n    type: UserActionEnum.SET_FAILED_DOWNLOAD_AVATAR;\r\n};\r\n\r\nexport type TRemoveFailedDownloadAvatar = {\r\n    type: UserActionEnum.REMOVE_FAILED_DOWNLOAD_AVATAR;\r\n};\r\n\r\nexport type TClearAplicationFrends = {\r\n    type: UserActionEnum.CLEAR_APLICATION_FRENDS;\r\n    payload: string;\r\n};\r\n\r\nexport type TUserAction =\r\n    | TUserGetInfo\r\n    | TUserGetInfoSuccess\r\n    | TUserGetInfoError\r\n    | TUserOutput\r\n    | TUserDownloadAvatar\r\n    | TSetFailedDownloadAvatar\r\n    | TRemoveFailedDownloadAvatar\r\n    | TClearAplicationFrends;\r\n","import {\r\n    IUser,\r\n    TRemoveFailedDownloadAvatar,\r\n    TSetFailedDownloadAvatar,\r\n    TUserAction,\r\n    TUserDownloadAvatar,\r\n    TUserGetInfo,\r\n    TUserGetInfoError,\r\n    TUserGetInfoSuccess,\r\n    TUserOutput,\r\n    TUserState,\r\n    UserActionEnum,\r\n} from '../../types/UserStore';\r\n\r\nconst defaultState: TUserState = {\r\n    isAuth: false,\r\n    isError: false,\r\n    user: null,\r\n    loading: true, // при первом рендере странички мы сразу будет запрос на сервер\r\n    isFailedDownloadAvatar: false,\r\n};\r\n\r\nexport const UserReducer = (state = defaultState, action: TUserAction): TUserState => {\r\n    switch (action.type) {\r\n        case UserActionEnum.USER_GET_INFO:\r\n            return { ...state, loading: action.loading };\r\n        case UserActionEnum.USER_GET_INFO_SUCCESS:\r\n            return { ...state, isAuth: true, user: action.payload, loading: false };\r\n        case UserActionEnum.USER_GET_INFO_ERROR:\r\n            return { ...state, isError: true, loading: false };\r\n        case UserActionEnum.USER_OUTPUT:\r\n            return { ...state, user: null, isAuth: false };\r\n        case UserActionEnum.SET_FAILED_DOWNLOAD_AVATAR:\r\n            return { ...state, isFailedDownloadAvatar: true };\r\n        case UserActionEnum.REMOVE_FAILED_DOWNLOAD_AVATAR:\r\n            return { ...state, isFailedDownloadAvatar: false };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const userGetInfo = (payload: string, loading: boolean = true): TUserGetInfo => ({\r\n    type: UserActionEnum.USER_GET_INFO,\r\n    payload,\r\n    loading,\r\n});\r\n\r\nexport const userGetInfoSuccess = (payload: IUser): TUserGetInfoSuccess => ({\r\n    type: UserActionEnum.USER_GET_INFO_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const userGetInfoError = (): TUserGetInfoError => ({\r\n    type: UserActionEnum.USER_GET_INFO_ERROR,\r\n});\r\n\r\nexport const userOutput = (): TUserOutput => ({\r\n    type: UserActionEnum.USER_OUTPUT,\r\n});\r\n\r\nexport const userDownloadAvatar = (payload: FormData, token: string): TUserDownloadAvatar => ({\r\n    type: UserActionEnum.USER_DOWNLOAD_AVATAR,\r\n    payload,\r\n    token,\r\n});\r\n\r\nexport const setFailedDownloadAvatar = (): TSetFailedDownloadAvatar => ({\r\n    type: UserActionEnum.SET_FAILED_DOWNLOAD_AVATAR,\r\n});\r\n\r\nexport const semoveFailedDownloadAvatar = (): TRemoveFailedDownloadAvatar => ({\r\n    type: UserActionEnum.REMOVE_FAILED_DOWNLOAD_AVATAR,\r\n});\r\n","import { MessageBd } from './socket/messageBd';\r\nimport { IUser } from './UserStore';\r\n\r\nexport type TNotificationMessages = {\r\n    roomId: string;\r\n    countNewMessage: number;\r\n};\r\n\r\nexport type TNotificationState = {\r\n    NotificationCount: number;\r\n    newFrends: IUser[];\r\n    NotificationMessages: TNotificationMessages[];\r\n};\r\n\r\nexport enum NotificationActionEnum {\r\n    ADD_NOTIFICATION = 'ADD_NOTIFICATION',\r\n    NEW_FREND_NOTIFICATION = 'NEW_FREND_NOTIFICATION',\r\n    SET_FREND_NOTIFICATION = 'SET_FREND_NOTIFICATION',\r\n    CLEAR_NOTIFICATION = 'CLEAR_NOTIFICATION',\r\n    CLEAR_FREND_NOTIFICATION = 'CLEAR_FREND_NOTIFICATION',\r\n    ADD_NOTIFICATION_MESSAGES = 'ADD_NOTIFICATION_MESSAGES',\r\n    SET_NOTIFICATION_MESSAGES = 'SET_NOTIFICATION_MESSAGES',\r\n    CLEAR_NOTIFICATION_MESSAGES = 'CLEAR_NOTIFICATION_MESSAGES',\r\n}\r\n\r\nexport type TNotificationAdd = {\r\n    type: NotificationActionEnum.ADD_NOTIFICATION;\r\n    payload: number;\r\n    isSaveLocalstorange: boolean;\r\n};\r\n\r\nexport type TNotificationNewFrend = {\r\n    type: NotificationActionEnum.NEW_FREND_NOTIFICATION;\r\n    payload: IUser;\r\n};\r\n\r\nexport type TNotificationSetNewFrend = {\r\n    type: NotificationActionEnum.SET_FREND_NOTIFICATION;\r\n    payload: IUser[];\r\n};\r\n\r\nexport type TNotificationClear = {\r\n    type: NotificationActionEnum.CLEAR_NOTIFICATION;\r\n};\r\n\r\nexport type TNotificationClearFrend = {\r\n    type: NotificationActionEnum.CLEAR_FREND_NOTIFICATION;\r\n};\r\n\r\nexport type TNotificationMessagesAdd = {\r\n    type: NotificationActionEnum.ADD_NOTIFICATION_MESSAGES;\r\n    payload: string;\r\n};\r\n\r\nexport type TNotificationMessagesSet = {\r\n    type: NotificationActionEnum.SET_NOTIFICATION_MESSAGES;\r\n    payload: MessageBd[];\r\n};\r\n\r\nexport type TNotificationMessagesClear = {\r\n    type: NotificationActionEnum.CLEAR_NOTIFICATION_MESSAGES;\r\n    payload: string;\r\n};\r\n\r\nexport type TNotificationAction =\r\n    | TNotificationAdd\r\n    | TNotificationClear\r\n    | TNotificationNewFrend\r\n    | TNotificationSetNewFrend\r\n    | TNotificationClearFrend\r\n    | TNotificationMessagesAdd\r\n    | TNotificationMessagesSet\r\n    | TNotificationMessagesClear;\r\n","import {\r\n    NotificationActionEnum,\r\n    TNotificationAction,\r\n    TNotificationAdd,\r\n    TNotificationClear,\r\n    TNotificationClearFrend,\r\n    TNotificationMessages,\r\n    TNotificationMessagesAdd,\r\n    TNotificationMessagesClear,\r\n    TNotificationMessagesSet,\r\n    TNotificationNewFrend,\r\n    TNotificationSetNewFrend,\r\n    TNotificationState,\r\n} from '../../types/NotificationStore';\r\nimport { MessageBd } from '../../types/socket/messageBd';\r\nimport { IUser } from '../../types/UserStore';\r\n\r\nconst defautlState: TNotificationState = {\r\n    NotificationCount: Number(localStorage.getItem('countNotifications')) || 0,\r\n    newFrends: [],\r\n    NotificationMessages: JSON.parse(localStorage.getItem('NotificationMessages')!) || [],\r\n};\r\n\r\nexport const NotificationReducer = (\r\n    state = defautlState,\r\n    action: TNotificationAction,\r\n): TNotificationState => {\r\n    switch (action.type) {\r\n        case NotificationActionEnum.ADD_NOTIFICATION:\r\n            if (action.isSaveLocalstorange) {\r\n                localStorage.setItem(\r\n                    'countNotifications',\r\n                    String(state.NotificationCount + action.payload),\r\n                );\r\n            }\r\n            return { ...state, NotificationCount: state.NotificationCount + action.payload };\r\n        case NotificationActionEnum.NEW_FREND_NOTIFICATION:\r\n            return { ...state, newFrends: [...state.newFrends, action.payload] };\r\n        case NotificationActionEnum.SET_FREND_NOTIFICATION:\r\n            return { ...state, newFrends: action.payload };\r\n        case NotificationActionEnum.CLEAR_NOTIFICATION:\r\n            localStorage.removeItem('countNotifications');\r\n            return { ...state, NotificationCount: 0 };\r\n        case NotificationActionEnum.CLEAR_FREND_NOTIFICATION:\r\n            return { ...state, newFrends: [] };\r\n        case NotificationActionEnum.ADD_NOTIFICATION_MESSAGES:\r\n            const notificationMessage = state.NotificationMessages.find(\r\n                (item) => item.roomId === action.payload,\r\n            );\r\n            if (typeof notificationMessage !== 'undefined') {\r\n                notificationMessage.countNewMessage++;\r\n                const copyNotificationsMessages = [\r\n                    ...state.NotificationMessages.filter((item) => item.roomId !== action.payload),\r\n                    notificationMessage,\r\n                ];\r\n                localStorage.setItem(\r\n                    'NotificationMessages',\r\n                    JSON.stringify(copyNotificationsMessages),\r\n                );\r\n                return {\r\n                    ...state,\r\n                    NotificationMessages: copyNotificationsMessages,\r\n                };\r\n            }\r\n            const copyNotificationsMessages = [\r\n                ...state.NotificationMessages,\r\n                { roomId: action.payload, countNewMessage: 1 },\r\n            ];\r\n            localStorage.setItem('NotificationMessages', JSON.stringify(copyNotificationsMessages));\r\n            return {\r\n                ...state,\r\n                NotificationMessages: copyNotificationsMessages,\r\n            };\r\n        case NotificationActionEnum.SET_NOTIFICATION_MESSAGES:\r\n            const setNotificationsMessages: TNotificationMessages[] = [];\r\n            action.payload.forEach((messageDb) => {\r\n                const NotificationMessage = setNotificationsMessages.find(\r\n                    (NotificationMessage) => NotificationMessage.roomId === messageDb.roomId,\r\n                );\r\n                if (NotificationMessage) NotificationMessage.countNewMessage++;\r\n                else\r\n                    setNotificationsMessages.push({ roomId: messageDb.roomId, countNewMessage: 1 });\r\n            });\r\n            return { ...state, NotificationMessages: setNotificationsMessages };\r\n        case NotificationActionEnum.CLEAR_NOTIFICATION_MESSAGES:\r\n            const copyClearNotificationsMessages = [\r\n                ...state.NotificationMessages.filter((item) => item.roomId !== action.payload),\r\n            ];\r\n            localStorage.setItem(\r\n                'NotificationMessages',\r\n                JSON.stringify(copyClearNotificationsMessages),\r\n            );\r\n            return { ...state, NotificationMessages: copyClearNotificationsMessages };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addNotification = (\r\n    payload: number = 1,\r\n    isSaveLocalstorange = true,\r\n): TNotificationAdd => ({\r\n    type: NotificationActionEnum.ADD_NOTIFICATION,\r\n    payload,\r\n    isSaveLocalstorange,\r\n});\r\n\r\nexport const addNewFrendNotification = (payload: IUser): TNotificationNewFrend => ({\r\n    type: NotificationActionEnum.NEW_FREND_NOTIFICATION,\r\n    payload,\r\n});\r\n\r\nexport const setNewFrendNotification = (payload: IUser[]): TNotificationSetNewFrend => ({\r\n    type: NotificationActionEnum.SET_FREND_NOTIFICATION,\r\n    payload,\r\n});\r\n\r\nexport const clearNotification = (): TNotificationClear => ({\r\n    type: NotificationActionEnum.CLEAR_NOTIFICATION,\r\n});\r\n\r\nexport const clearFrendNotification = (): TNotificationClearFrend => ({\r\n    type: NotificationActionEnum.CLEAR_FREND_NOTIFICATION,\r\n});\r\n\r\nexport const addMessageNotification = (payload: string): TNotificationMessagesAdd => ({\r\n    type: NotificationActionEnum.ADD_NOTIFICATION_MESSAGES,\r\n    payload,\r\n});\r\n\r\nexport const setMessageNotification = (payload: MessageBd[]): TNotificationMessagesSet => ({\r\n    type: NotificationActionEnum.SET_NOTIFICATION_MESSAGES,\r\n    payload,\r\n});\r\n\r\nexport const clearMessageNotification = (payload: string): TNotificationMessagesClear => ({\r\n    type: NotificationActionEnum.CLEAR_NOTIFICATION_MESSAGES,\r\n    payload,\r\n});\r\n","type TPagesMetadataState = {\r\n    collapsed: boolean;\r\n};\r\n\r\nenum TPagesMetadataActionEnum {\r\n    SET_COLLEPSED = 'SET_COLLEPSED',\r\n}\r\n\r\ntype TSetCollepsed = {\r\n    type: TPagesMetadataActionEnum.SET_COLLEPSED;\r\n};\r\n\r\ntype TPagesMetadataAction = TSetCollepsed;\r\n\r\nconst defaultStore: TPagesMetadataState = {\r\n    collapsed: false, // стостояние бокового меню, нужно было вынести для верстки\r\n};\r\n\r\nexport const PagesMetadataReducer = (\r\n    state = defaultStore,\r\n    action: TPagesMetadataAction,\r\n): TPagesMetadataState => {\r\n    switch (action.type) {\r\n        case TPagesMetadataActionEnum.SET_COLLEPSED:\r\n            return { ...state, collapsed: !state.collapsed };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setCollepsed = (): TSetCollepsed => ({\r\n    type: TPagesMetadataActionEnum.SET_COLLEPSED,\r\n});\r\n","import { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { registerRequest, closeAlertSuccess } from '../store/reducers/RegisterReducer';\r\nimport { authRequest, closeAlertError, clearAuth } from '../store/reducers/AuthReducer';\r\nimport {\r\n    userGetInfo,\r\n    userOutput,\r\n    userDownloadAvatar,\r\n    semoveFailedDownloadAvatar,\r\n} from '../store/reducers/UserReducer';\r\nimport {\r\n    addNotification,\r\n    clearNotification,\r\n    addNewFrendNotification,\r\n    clearFrendNotification,\r\n    addMessageNotification,\r\n    clearMessageNotification,\r\n    setMessageNotification,\r\n} from '../store/reducers/NotificationReducer';\r\nimport { setCollepsed } from '../store/reducers/PagesMetadataReducer';\r\n\r\nconst actionCreater = {\r\n    registerRequest,\r\n    closeAlertSuccess,\r\n    authRequest,\r\n    closeAlertError,\r\n    userGetInfo,\r\n    addNotification,\r\n    clearNotification,\r\n    addNewFrendNotification,\r\n    clearFrendNotification,\r\n    setCollepsed,\r\n    addMessageNotification,\r\n    clearMessageNotification,\r\n    setMessageNotification,\r\n    userOutput,\r\n    clearAuth,\r\n    userDownloadAvatar,\r\n    semoveFailedDownloadAvatar,\r\n};\r\n\r\nexport const useTypeDispatch = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(actionCreater, dispatch);\r\n};\r\n","import React from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport { UserOutlined, BellOutlined, TeamOutlined, MessageOutlined } from '@ant-design/icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../scss/UserLayout.scss';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport { CustomBadge } from './CustomElement/CustomBadge';\r\nimport { useTypeDispatch } from '../hooks/useTypedDispatch';\r\n\r\nconst { Content, Sider } = Layout;\r\n\r\nconst UserLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n    const { NotificationCount, NotificationMessages } = useTypedSelector(\r\n        (state) => state.NotificationReducer,\r\n    );\r\n    const { collapsed } = useTypedSelector((state) => state.PagesMetadataReducer);\r\n    const { setCollepsed } = useTypeDispatch();\r\n\r\n    return (\r\n        <Layout className=\"Layout\">\r\n            <Sider\r\n                collapsible\r\n                collapsed={collapsed}\r\n                onCollapse={setCollepsed}\r\n                style={{\r\n                    overflow: 'auto',\r\n                    height: '100vh',\r\n                    position: 'sticky',\r\n                    top: 0,\r\n                    left: 0,\r\n                }}>\r\n                <h1 className=\"Titel\">{collapsed ? 'SC' : 'Simple - Chat'}</h1>\r\n                <Menu theme=\"dark\" mode=\"inline\">\r\n                    <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                        <Link to=\"/\"> Главная</Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"2\" icon={<TeamOutlined />}>\r\n                        <Link to=\"/frends\"> Друзья</Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                        key=\"3\"\r\n                        icon={\r\n                            collapsed ? (\r\n                                <CustomBadge\r\n                                    badgeKey={1}\r\n                                    collapsed={collapsed}\r\n                                    txt={<BellOutlined />}\r\n                                    count={NotificationCount}\r\n                                />\r\n                            ) : (\r\n                                <BellOutlined />\r\n                            )\r\n                        }>\r\n                        <Link to=\"/notification\">\r\n                            <CustomBadge\r\n                                badgeKey={1}\r\n                                collapsed={collapsed}\r\n                                txt={'Уведомления'}\r\n                                count={collapsed ? 0 : NotificationCount}\r\n                            />\r\n                        </Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                        key=\"4\"\r\n                        icon={\r\n                            collapsed ? (\r\n                                <CustomBadge\r\n                                    badgeKey={2}\r\n                                    collapsed={collapsed}\r\n                                    txt={<MessageOutlined />}\r\n                                    count={NotificationMessages.length}\r\n                                />\r\n                            ) : (\r\n                                <MessageOutlined />\r\n                            )\r\n                        }>\r\n                        <Link to=\"/messages\">\r\n                            <CustomBadge\r\n                                badgeKey={2}\r\n                                collapsed={collapsed}\r\n                                txt={'Сообшения'}\r\n                                count={collapsed ? 0 : NotificationMessages.length}\r\n                            />\r\n                        </Link>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Sider>\r\n            <Layout className=\"site-layout\">\r\n                <Content className=\"site-layout-background\">{children}</Content>\r\n            </Layout>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default UserLayout;\r\n","export const ServerPort: string = 'http://80.249.148.25:8000';\r\n","import socketio, { Socket } from 'socket.io-client';\r\nimport { DefaultEventsMap } from 'socket.io-client/build/typed-events';\r\nimport { ServerPort } from './config';\r\n\r\nconst io: Socket<DefaultEventsMap, DefaultEventsMap> = socketio(ServerPort);\r\n\r\nexport default io;\r\n","import React from 'react';\r\nimport { Alert, Avatar, Button, Typography } from 'antd';\r\nimport { UserOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\n\r\nimport '../scss/HomePage.scss';\r\nimport { useTypeDispatch } from '../hooks/useTypedDispatch';\r\nimport io from '../Socket';\r\nimport { ServerPort } from '../config';\r\n\r\nconst Title = Typography.Title;\r\n\r\nconst HomePage: React.FC = () => {\r\n    const avatarInput = React.useRef<HTMLInputElement>(null);\r\n    const { user, isFailedDownloadAvatar } = useTypedSelector((state) => state.UserReducer);\r\n    const { token } = useTypedSelector((state) => state.AuthReducer);\r\n    const { userOutput, userDownloadAvatar, semoveFailedDownloadAvatar } = useTypeDispatch();\r\n\r\n    const outUser = () => {\r\n        userOutput();\r\n        io.emit('USER:LEAVR_USER', user?._id);\r\n    };\r\n\r\n    const clickDownloadBtn = () => {\r\n        avatarInput.current?.click();\r\n    };\r\n\r\n    const downloadAvatar = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const formData = new FormData();\r\n        formData.append('avatar', e.target.files![0]);\r\n        userDownloadAvatar(formData, localStorage.getItem('token') || token!);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {isFailedDownloadAvatar ? (\r\n                <Alert\r\n                    type=\"error\"\r\n                    message=\"Не удалось загрузить изображение\"\r\n                    onClose={semoveFailedDownloadAvatar}\r\n                    closable\r\n                />\r\n            ) : null}\r\n            <Avatar\r\n                src={ServerPort + '/avatar/' + user?.avatar}\r\n                shape=\"square\"\r\n                size={128}\r\n                icon={<UserOutlined />}\r\n            />\r\n            <Button\r\n                onClick={clickDownloadBtn}\r\n                className=\"download__avatar\"\r\n                icon={<UploadOutlined />}>\r\n                Загрузить Изображение\r\n            </Button>\r\n            <input\r\n                onChange={downloadAvatar}\r\n                ref={avatarInput}\r\n                type=\"file\"\r\n                style={{ display: 'none' }}\r\n            />\r\n            <Title className=\"Title__nicname\">Никнейм: {user?.nicname}</Title>\r\n            <Title className=\"Title__email\" level={2}>\r\n                Почта: {user?.email}\r\n            </Title>\r\n            <Button onClick={outUser} type=\"primary\" danger>\r\n                Выход\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\n\r\nimport UserLayout from '../component/UserLayout';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\n\r\nconst NotePage: React.FC = () => {\r\n    const { isAuth } = useTypedSelector((state) => state.UserReducer);\r\n\r\n    return isAuth ? (\r\n        <h1>404</h1>\r\n    ) : (\r\n        <UserLayout>\r\n            <h1>404</h1>\r\n        </UserLayout>\r\n    );\r\n};\r\n\r\nexport default NotePage;\r\n","import { Avatar, List } from 'antd';\r\nimport React from 'react';\r\nimport { ServerPort } from '../config';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\n\r\nconst FrendsPage: React.FC = () => {\r\n    const { frends } = useTypedSelector((state) => state.UserReducer.user!);\r\n\r\n    if (frends.length === 0) return null;\r\n\r\n    return (\r\n        <>\r\n            <h1>Ваши Друзья</h1>\r\n            <List\r\n                dataSource={frends}\r\n                renderItem={(frend) => (\r\n                    <List.Item>\r\n                        <List.Item.Meta\r\n                            avatar={\r\n                                <Avatar\r\n                                    src={\r\n                                        frend.avatar\r\n                                            ? ServerPort + '/avatar/' + frend.avatar\r\n                                            : './notAvatar.jpg'\r\n                                    }\r\n                                />\r\n                            }\r\n                            title={frend.nicname}\r\n                            description={frend.email}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FrendsPage;\r\n","import { ServerPort } from '../../config';\r\nimport { IUser } from '../../types/UserStore';\r\n\r\nexport const searchUser = async (userId: string, text: string = '') => {\r\n    const response = await fetch(ServerPort + '/searchUser', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text, userId }),\r\n    });\r\n    const data: IUser[] = await response.json();\r\n    return data;\r\n};\r\n","import React from 'react';\r\nimport { Avatar, Button, List } from 'antd';\r\n\r\nimport { IUser } from '../types/UserStore';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport io from '../Socket';\r\nimport { useTypeDispatch } from '../hooks/useTypedDispatch';\r\nimport { ServerPort } from '../config';\r\n\r\ninterface props {\r\n    user: IUser;\r\n}\r\n\r\nconst SearchFrendsItem: React.FC<props> = ({ user }) => {\r\n    const [isAplication, setIsAplication] = React.useState<boolean>(false);\r\n    const { user: MyProfile } = useTypedSelector((state) => state.UserReducer);\r\n    const { token } = useTypedSelector((state) => state.AuthReducer);\r\n    const { userGetInfo } = useTypeDispatch();\r\n\r\n    const addFrend = (userId: string, frendId: string) => {\r\n        io.emit('USER:ADD_FREND_REQUEST', userId, frendId);\r\n        setIsAplication(true);\r\n        userGetInfo(token || localStorage.getItem('token')!, false);\r\n    };\r\n\r\n    return (\r\n        <List.Item\r\n            actions={[\r\n                <Button\r\n                    type=\"link\"\r\n                    disabled={\r\n                        isAplication ||\r\n                        MyProfile?.requestFrends.some((person) => person._id === user._id) ||\r\n                        MyProfile?.frends.some((person) => person._id === user._id)\r\n                    }\r\n                    onClick={addFrend.bind(null, MyProfile?._id!, user._id)}>\r\n                    Добавить в друзья\r\n                </Button>,\r\n            ]}>\r\n            <List.Item.Meta\r\n                avatar={\r\n                    <Avatar\r\n                        src={\r\n                            user.avatar ? ServerPort + '/avatar/' + user.avatar : './notAvatar.jpg'\r\n                        }\r\n                    />\r\n                }\r\n                title={user.nicname}\r\n                description={user.email}\r\n            />\r\n        </List.Item>\r\n    );\r\n};\r\n\r\nexport default SearchFrendsItem;\r\n","import React from 'react';\r\nimport { Input, List } from 'antd';\r\n\r\nimport { IUser } from '../types/UserStore';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport { searchUser } from '../store/fetch/searchUser';\r\nimport SearchFrendsItem from './SearchFrendsItem';\r\n\r\nconst SearchFrends: React.FC = () => {\r\n    const [users, setUsers] = React.useState<IUser[]>();\r\n    const { user: MyProfile } = useTypedSelector((state) => state.UserReducer);\r\n\r\n    React.useEffect(() => {\r\n        (async () => {\r\n            const data = await searchUser(MyProfile?._id!);\r\n            setUsers(data);\r\n        })();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const onChangeSearch = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const data = await searchUser(MyProfile?._id!, e.target.value);\r\n        setUsers(data);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Input onChange={onChangeSearch} placeholder=\"Введите имя\" size=\"large\" />\r\n            <List\r\n                itemLayout=\"horizontal\"\r\n                dataSource={users}\r\n                pagination={{\r\n                    pageSize: 3,\r\n                }}\r\n                renderItem={(user) => <SearchFrendsItem user={user} />}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchFrends;\r\n","import React from 'react';\r\nimport FrendsPage from '../component/FrendsPage';\r\nimport SearchFrends from '../component/SearchFrends';\r\n\r\nconst Frends: React.FC = () => {\r\n    return (\r\n        <>\r\n            <SearchFrends />\r\n            <hr />\r\n            <FrendsPage />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Frends;\r\n","import React from 'react';\r\nimport { Button, Form, Input, Checkbox, Alert } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { MailOutlined, LockOutlined } from '@ant-design/icons';\r\nimport '../scss/Login.scss';\r\nimport { ILoginForm } from '../types/form/LoginForm';\r\nimport { useTypeDispatch } from '../hooks/useTypedDispatch';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\n\r\nconst Login: React.FC = () => {\r\n    const { error } = useTypedSelector((state) => state.AuthReducer);\r\n    const { authRequest, closeAlertError } = useTypeDispatch();\r\n    const [isRememmer, setIsRemember] = React.useState<boolean>(false);\r\n    const [logForm, setLogForm] = React.useState<ILoginForm>({\r\n        email: '',\r\n        password: '',\r\n    });\r\n\r\n    const onChangeForm = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setLogForm({ ...logForm, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const onSubmitForm = (): void => {\r\n        authRequest(logForm, isRememmer);\r\n    };\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Form className=\"form\">\r\n                {error ? (\r\n                    <Alert\r\n                        message=\"Неверрно введена почта или пароль\"\r\n                        type=\"error\"\r\n                        banner={true}\r\n                        closable={true}\r\n                        onClose={closeAlertError}></Alert>\r\n                ) : null}\r\n                <Form.Item>\r\n                    <Input\r\n                        prefix={<MailOutlined />}\r\n                        placeholder=\"Почта\"\r\n                        name=\"email\"\r\n                        value={logForm.email}\r\n                        onChange={onChangeForm}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Input.Password\r\n                        prefix={<LockOutlined />}\r\n                        placeholder=\"Пароль\"\r\n                        name=\"password\"\r\n                        value={logForm.password}\r\n                        onChange={onChangeForm}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Checkbox onChange={setIsRemember.bind(null, (prev) => !prev)}>\r\n                        Запомнить меня\r\n                    </Checkbox>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button className=\"btn\" type=\"primary\" onClick={onSubmitForm}>\r\n                        Войти\r\n                    </Button>\r\n                    Или <Link to=\"/register\">Зарегестрироваться</Link>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { Avatar, Comment } from 'antd';\r\nimport { MessageBd } from '../types/socket/messageBd';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport { IUser } from '../types/UserStore';\r\nimport { ServerPort } from '../config';\r\n\r\ninterface Props {\r\n    message: MessageBd;\r\n}\r\n\r\nconst MessagesListItem: React.FC<Props> = ({ message }) => {\r\n    const [isMy, setIsMy] = React.useState<boolean>();\r\n    const [frendInfo, setFrendInfo] = React.useState<IUser | null>();\r\n    const { user } = useTypedSelector((state) => state.UserReducer);\r\n\r\n    React.useEffect(() => {\r\n        if (user?._id !== message.user) {\r\n            setIsMy(false);\r\n            setFrendInfo(user?.frends.find((frend) => frend._id === message.user));\r\n        } else setIsMy(true);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <Comment\r\n            author={isMy ? user?.nicname : frendInfo?.nicname}\r\n            content={<p>{message.text}</p>}\r\n            style={{ backgroundColor: isMy ? 'lightblue' : 'white' }}\r\n            avatar={\r\n                <Avatar\r\n                    src={\r\n                        isMy\r\n                            ? user?.avatar\r\n                                ? ServerPort + '/avatar/' + user.avatar\r\n                                : '../notAvatar.jpg'\r\n                            : frendInfo?.avatar\r\n                            ? ServerPort + '/avatar/' + frendInfo.avatar\r\n                            : '../notAvatar.jpg'\r\n                    }\r\n                />\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default MessagesListItem;\r\n","import React from 'react';\r\nimport { Input } from 'antd';\r\nimport io from '../Socket';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport '../scss/MessageRoom.scss';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport { MessageBd } from '../types/socket/messageBd';\r\nimport MessagesListItem from '../component/MessagesListItem';\r\nimport { IUser } from '../types/UserStore';\r\nimport { useTypeDispatch } from '../hooks/useTypedDispatch';\r\n\r\nconst Message: React.FC = () => {\r\n    const frendRef = React.useRef<IUser>();\r\n    const roomId = useLocation().pathname.split('/')[2];\r\n    const [messages, setMessages] = React.useState<MessageBd[]>([]);\r\n    const { collapsed } = useTypedSelector((state) => state.PagesMetadataReducer);\r\n    const { NotificationMessages } = useTypedSelector((state) => state.NotificationReducer);\r\n    const { user } = useTypedSelector((state) => state.UserReducer);\r\n    const { clearMessageNotification } = useTypeDispatch();\r\n\r\n    React.useEffect(() => {\r\n        const frend = user?.frends.find((man) => man._id !== user?._id);\r\n        frendRef.current = frend;\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        io.emit('MESSAGE:JOIN_MESSAGE_ROOM', roomId, user?._id);\r\n        return () => {\r\n            setMessages([]);\r\n            io.emit('leaveMessageRoom', user?._id);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        io.on('MESSAGE:GET_MESSAGES', (messagesArrDb: MessageBd[]) => {\r\n            setMessages(messagesArrDb);\r\n        });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        io.on('MESSAGE:ACCEPT_MESSAGE', (messagesArrDb: MessageBd[]) => {\r\n            setMessages(messagesArrDb);\r\n        });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        clearMessageNotification(roomId);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [NotificationMessages.length]);\r\n\r\n    const sendMessage = (message: string) => {\r\n        io.emit('MESSAGE:SEND_MESSAGE', roomId, user?._id, message, frendRef.current?._id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {messages.length !== 0\r\n                ? messages.map((message) => (\r\n                      <MessagesListItem key={message._id} message={message} />\r\n                  ))\r\n                : null}\r\n            <div style={{ marginTop: '40px' }}></div>\r\n            <div\r\n                className=\"wrapper__messageinput\"\r\n                style={{ width: `calc(100% - ${collapsed ? 100 : 219}px)` }}>\r\n                <Input.Search\r\n                    placeholder=\"Введите сообшение\"\r\n                    size=\"large\"\r\n                    enterButton=\"Отправить\"\r\n                    onSearch={sendMessage}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport { Avatar, List } from 'antd';\r\nimport { IRoom, IUser } from '../types/UserStore';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport '../scss/MessageItem.scss';\r\nimport { TNotificationMessages } from '../types/NotificationStore';\r\nimport { ServerPort } from '../config';\r\n\r\ninterface Props {\r\n    room: IRoom;\r\n}\r\n\r\nconst MessageItem: React.FC<Props> = ({ room }) => {\r\n    const frendRef = React.useRef<IUser>();\r\n    const router = useHistory();\r\n    const [notificationMessage, setNotificationMessage] = React.useState<TNotificationMessages>();\r\n    const { user } = useTypedSelector((state) => state.UserReducer);\r\n    const { NotificationMessages } = useTypedSelector((state) => state.NotificationReducer);\r\n\r\n    React.useEffect(() => {\r\n        const frend = room.users.find((man) => man._id !== user?._id);\r\n        frendRef.current = frend;\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        const notificationMessage = NotificationMessages.find((item) => item.roomId === room._id);\r\n        if (notificationMessage) setNotificationMessage(notificationMessage);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [NotificationMessages]);\r\n\r\n    const goMessage = (): void => {\r\n        router.push('/messages/' + room._id);\r\n    };\r\n\r\n    if (typeof frendRef.current === 'undefined') return null;\r\n\r\n    return (\r\n        <List.Item\r\n            onClick={goMessage}\r\n            className=\"MessageItem\"\r\n            actions={[\r\n                notificationMessage && notificationMessage.countNewMessage !== 0 ? (\r\n                    <div className=\"badgeMessageItem\">+{notificationMessage?.countNewMessage}</div>\r\n                ) : null,\r\n            ]}>\r\n            <List.Item.Meta\r\n                avatar={\r\n                    <Avatar\r\n                        src={\r\n                            frendRef.current.avatar\r\n                                ? ServerPort + '/avatar/' + frendRef.current.avatar\r\n                                : './notAvatar.jpg'\r\n                        }\r\n                    />\r\n                }\r\n                title={frendRef.current.nicname}\r\n                description={frendRef.current.email}\r\n            />\r\n        </List.Item>\r\n    );\r\n};\r\n\r\nexport default MessageItem;\r\n","import React from 'react';\r\nimport { List } from 'antd';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport MessageItem from '../component/MessageItem';\r\n\r\nconst Messages: React.FC = () => {\r\n    const { rooms } = useTypedSelector((state) => state.UserReducer.user!);\r\n\r\n    if (rooms.length === 0) return <h1>Сначало вам необходимо завести друзей</h1>;\r\n\r\n    return <List bordered dataSource={rooms} renderItem={(room) => <MessageItem room={room} />} />;\r\n};\r\n\r\nexport default Messages;\r\n","import { Avatar, Button, List } from 'antd';\r\nimport React from 'react';\r\nimport { ServerPort } from '../config';\r\nimport { useTypeDispatch } from '../hooks/useTypedDispatch';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport io from '../Socket';\r\n\r\nconst Notification: React.FC = () => {\r\n    const { user } = useTypedSelector((state) => state.UserReducer);\r\n    const { newFrends } = useTypedSelector((state) => state.NotificationReducer);\r\n    const { clearNotification, clearFrendNotification } = useTypeDispatch();\r\n\r\n    React.useEffect(() => {\r\n        clearNotification();\r\n        localStorage.removeItem('countNotifications');\r\n        if (user!.unreadNotificationAplicationFrends!.length > 0) {\r\n            io.emit('USER:CLEAR_UREAD_NOTIFICATION_APLICATION_FRENDS', user?._id);\r\n        }\r\n        if (user!.newNotificationFrends!.length > 0) {\r\n            io.emit('USER:CLEAR_NEW_FRENDS_NOTIFICATION', user?._id);\r\n        }\r\n        return () => {\r\n            clearFrendNotification();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const addFrend = async (frendId: string) => {\r\n        io.emit('USER:ADD_FREND', user?._id, frendId);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {user?.applicationFrends.length === 0 && newFrends.length === 0 ? (\r\n                <h1>Нет Уведомлений</h1>\r\n            ) : null}\r\n            {user?.applicationFrends.length !== 0 ? (\r\n                <>\r\n                    <h1>Заявки на Дружбу</h1>\r\n                    <List\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={user?.applicationFrends}\r\n                        renderItem={(potontialFrend) => (\r\n                            <List.Item\r\n                                actions={[\r\n                                    <Button\r\n                                        type=\"link\"\r\n                                        onClick={addFrend.bind(null, potontialFrend._id)}>\r\n                                        Принять запрос дружбы\r\n                                    </Button>,\r\n                                ]}>\r\n                                <List.Item.Meta\r\n                                    avatar={\r\n                                        <Avatar\r\n                                            src={\r\n                                                potontialFrend?.avatar\r\n                                                    ? ServerPort +\r\n                                                      '/avatar/' +\r\n                                                      potontialFrend?.avatar\r\n                                                    : './notAvatar.jpg'\r\n                                            }\r\n                                        />\r\n                                    }\r\n                                    title={potontialFrend.nicname}\r\n                                    description={potontialFrend.email}\r\n                                />\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </>\r\n            ) : null}\r\n            {newFrends.length !== 0 ? (\r\n                <>\r\n                    <h1>Ваш запрос дружбы приняли</h1>\r\n                    <List\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={newFrends}\r\n                        renderItem={(newFrend) => (\r\n                            <List.Item>\r\n                                <List.Item.Meta\r\n                                    avatar={\r\n                                        <Avatar\r\n                                            src={\r\n                                                newFrend?.avatar\r\n                                                    ? ServerPort + '/avatar/' + newFrend?.avatar\r\n                                                    : './notAvatar.jpg'\r\n                                            }\r\n                                        />\r\n                                    }\r\n                                    title={newFrend.nicname}\r\n                                    description={newFrend.email}\r\n                                />\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport { Alert, Button, Form, Input } from 'antd';\r\nimport { UserOutlined, LockOutlined, MailOutlined } from '@ant-design/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { IRegisterForm } from '../types/form/RegisterForm';\r\nimport { useTypeDispatch } from '../hooks/useTypedDispatch';\r\nimport { useTypedSelector } from '../hooks/useTypedSelector';\r\nimport '../scss/Register.scss';\r\n\r\nconst Register: React.FC = () => {\r\n    const { errors, success } = useTypedSelector((state) => state.RegisterReducer);\r\n    const { registerRequest, closeAlertSuccess } = useTypeDispatch();\r\n    const [regForm, setRegForm] = React.useState<IRegisterForm>({\r\n        nicname: '',\r\n        email: '',\r\n        password: '',\r\n        repeatPassword: '',\r\n    });\r\n\r\n    const onChangeForm = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setRegForm({ ...regForm, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const onSubmitForm = (): void => {\r\n        registerRequest(regForm);\r\n    };\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <Form className=\"form\">\r\n                {success ? (\r\n                    <Alert\r\n                        message=\"Регистраия прошла успешно\"\r\n                        type=\"success\"\r\n                        banner={true}\r\n                        closable={true}\r\n                        onClose={() => {\r\n                            closeAlertSuccess();\r\n                        }}></Alert>\r\n                ) : null}\r\n                <Form.Item\r\n                    validateStatus={errors?.nicname ? 'error' : 'success'}\r\n                    help={errors?.nicname}>\r\n                    <Input\r\n                        name=\"nicname\"\r\n                        value={regForm.nicname}\r\n                        onChange={onChangeForm}\r\n                        prefix={<UserOutlined />}\r\n                        placeholder=\"Логин\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    validateStatus={errors?.email ? 'error' : 'success'}\r\n                    help={errors?.email}>\r\n                    <Input\r\n                        name=\"email\"\r\n                        value={regForm.email}\r\n                        onChange={onChangeForm}\r\n                        prefix={<MailOutlined />}\r\n                        placeholder=\"Почта\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    validateStatus={errors?.password ? 'error' : 'success'}\r\n                    help={errors?.password}>\r\n                    <Input.Password\r\n                        name=\"password\"\r\n                        value={regForm.password}\r\n                        onChange={onChangeForm}\r\n                        prefix={<LockOutlined />}\r\n                        placeholder=\"Пароль\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    validateStatus={errors?.repeatPassword ? 'error' : 'success'}\r\n                    help={errors?.repeatPassword}>\r\n                    <Input.Password\r\n                        name=\"repeatPassword\"\r\n                        value={regForm.repeatPassword}\r\n                        onChange={onChangeForm}\r\n                        prefix={<LockOutlined />}\r\n                        placeholder=\"Повторите Пароль\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button className=\"btn\" type=\"primary\" onClick={onSubmitForm}>\r\n                        Зарегестрироваться\r\n                    </Button>\r\n                    Или <Link to=\"/login\">Войти</Link>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\ninterface props {\r\n    component: React.ComponentType<any>;\r\n    path: string;\r\n    auth: boolean;\r\n    exact?: boolean;\r\n}\r\n\r\nconst PrviateRouter: React.FC<props> = ({ component: Component, auth, ...props }) => (\r\n    <Route render={() => (auth === false ? <Redirect to=\"/login\" /> : <Component {...props} />)} />\r\n);\r\n\r\nexport default PrviateRouter;\r\n","import React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { useTypedSelector } from './hooks/useTypedSelector';\r\nimport HomePage from './pages';\r\n\r\nimport NotePage from './pages/404';\r\nimport Frends from './pages/Frends';\r\nimport Login from './pages/Login';\r\nimport Message from './pages/Message';\r\nimport Messages from './pages/Messages';\r\nimport Notification from './pages/Notification';\r\nimport Register from './pages/Register';\r\nimport PrviateRouter from './PrviateRouter';\r\n\r\nconst RouterPage: React.FC = () => {\r\n    const { isAuth } = useTypedSelector((state) => state.UserReducer);\r\n\r\n    return (\r\n        <Switch>\r\n            <PrviateRouter auth={isAuth} exact path=\"/\" component={HomePage} />\r\n            <PrviateRouter auth={isAuth} exact path=\"/frends\" component={Frends} />\r\n            <PrviateRouter auth={isAuth} exact path=\"/notification\" component={Notification} />\r\n            <PrviateRouter auth={isAuth} exact path=\"/messages\" component={Messages} />\r\n            <PrviateRouter\r\n                auth={isAuth}\r\n                exact\r\n                path=\"/messages/:MessageRoomId\"\r\n                component={Message}\r\n            />\r\n            <Route\r\n                exact\r\n                path=\"/login\"\r\n                component={() => (isAuth ? <Redirect to=\"/\" /> : <Login />)}\r\n            />\r\n            <Route\r\n                exact\r\n                path=\"/register\"\r\n                component={() => (isAuth ? <Redirect to=\"/\" /> : <Register />)}\r\n            />\r\n            <Route path=\"*\" component={NotePage} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default RouterPage;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport UserLayout from './component/UserLayout';\r\nimport { useTypeDispatch } from './hooks/useTypedDispatch';\r\nimport { useTypedSelector } from './hooks/useTypedSelector';\r\n\r\nimport RouterPage from './Router';\r\nimport io from './Socket';\r\nimport { IUser } from './types/UserStore';\r\n\r\nconst App: React.FC = () => {\r\n    const { isAuth, loading } = useTypedSelector((state) => state.UserReducer);\r\n    const { token } = useTypedSelector((state) => state.AuthReducer);\r\n    const toketRef = React.useRef<string | null>(token);\r\n    const { userGetInfo, addNotification, addNewFrendNotification, addMessageNotification } =\r\n        useTypeDispatch();\r\n\r\n    if (token) toketRef.current = token;\r\n\r\n    React.useEffect(() => {\r\n        userGetInfo(token || localStorage.getItem('token')!);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        io.on('USER:Notification_ADD_FREND', () => {\r\n            addNotification();\r\n            userGetInfo(toketRef.current || localStorage.getItem('token')!, false);\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        io.on('USER:USER:ADD_FREND_SUCCESS', (frend: IUser) => {\r\n            addNotification();\r\n            addNewFrendNotification(frend);\r\n            userGetInfo(toketRef.current || localStorage.getItem('token')!, false);\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        io.on('MESSAGE:ADD_NOTIFICATIOM_NEW_MESSAGE', (roomId: string) => {\r\n            addMessageNotification(roomId);\r\n            userGetInfo(toketRef.current || localStorage.getItem('token')!, false);\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        io.on('USER:ADD_FREND_SUCCESS', () => {\r\n            userGetInfo(toketRef.current || localStorage.getItem('token')!, false);\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        io.on('USER:ADD_FREND_SUCCESS', () => {\r\n            userGetInfo(toketRef.current || localStorage.getItem('token')!, false);\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // страничка не будет отображена до тех пор пока не получить ответ от сервера\r\n    if (loading) return <></>;\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            {isAuth ? (\r\n                <UserLayout>\r\n                    <RouterPage />\r\n                </UserLayout>\r\n            ) : (\r\n                <RouterPage />\r\n            )}\r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ServerPort } from '../../config';\r\nimport { TAuthResponseError } from '../../types/AuthStore';\r\nimport { ILoginForm } from '../../types/form/LoginForm';\r\n\r\nexport const authFetchData = async (authForm: ILoginForm) => {\r\n    const response = await fetch(ServerPort + '/login', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(authForm),\r\n    });\r\n    const data: TAuthResponseError = await response.json();\r\n    return data;\r\n};\r\n","import { call, put, takeEvery } from '@redux-saga/core/effects';\r\n\r\nimport { AuthActionEnum, TAuthRequsest, TAuthResponseError } from '../../types/AuthStore';\r\nimport { authFetchData } from '../fetch/authFetch';\r\nimport { authError, authFailed, authSuccess } from '../reducers/AuthReducer';\r\nimport { userGetInfo } from '../reducers/UserReducer';\r\n\r\nfunction* getDataAuth(authRequsest: TAuthRequsest) {\r\n    try {\r\n        const data: TAuthResponseError = yield call(authFetchData.bind(null, authRequsest.payload));\r\n        if (data.error) yield put(authError());\r\n        else {\r\n            if (authRequsest.isRememberMe) localStorage.setItem('token', data.token!);\r\n            yield put(authSuccess(data.token!));\r\n            yield put(userGetInfo(data.token!));\r\n        }\r\n    } catch (err) {\r\n        yield put(authFailed());\r\n    }\r\n}\r\n\r\nexport function* watcherAuthSaga() {\r\n    yield takeEvery(AuthActionEnum.AUTH_REQUEST, getDataAuth);\r\n}\r\n","import { ServerPort } from '../../config';\r\nimport { IRegisterForm } from '../../types/form/RegisterForm';\r\nimport { TResponseRegisterErrorValid, TResponseRegisterSuccess } from '../../types/RegisterStore';\r\n\r\nexport const registerFetchData = async (\r\n    registerForm: IRegisterForm,\r\n): Promise<TResponseRegisterErrorValid | TResponseRegisterSuccess> => {\r\n    const response = await fetch(ServerPort + '/register', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(registerForm),\r\n    });\r\n    const data: TResponseRegisterErrorValid = await response.json();\r\n    return data;\r\n};\r\n","import { call, CallEffect, ForkEffect, put, PutEffect, takeEvery } from 'redux-saga/effects';\r\nimport { registerError, registerFailed, registerSuccess } from '../reducers/RegisterReducer';\r\nimport { registerFetchData } from '../fetch/registerFetch';\r\nimport {\r\n    RegisterActionEnum,\r\n    TResponseRegisterErrorValid,\r\n    TRegisterError,\r\n    TRegisterFailed,\r\n    TRegisterRequest,\r\n    TRegisterSuccess,\r\n    TResponseRegisterSuccess,\r\n} from '../../types/RegisterStore';\r\n\r\nfunction* getDataRegister(\r\n    registerRequest: TRegisterRequest,\r\n): Generator<\r\n    | CallEffect<TResponseRegisterErrorValid | TResponseRegisterSuccess>\r\n    | PutEffect<TRegisterSuccess>\r\n    | PutEffect<TRegisterError>\r\n    | PutEffect<TRegisterFailed>,\r\n    void,\r\n    TResponseRegisterErrorValid\r\n> {\r\n    try {\r\n        const data: TResponseRegisterErrorValid | TResponseRegisterSuccess = yield call(\r\n            registerFetchData.bind(null, registerRequest.payload),\r\n        );\r\n        if (data.validErr) {\r\n            yield put(registerError(data.errors));\r\n        } else {\r\n            yield put(registerSuccess());\r\n        }\r\n    } catch (error) {\r\n        yield put(registerFailed());\r\n    }\r\n}\r\n\r\nexport function* watcherRegisterSaga(): Generator<ForkEffect<never>, void, unknown> {\r\n    yield takeEvery(RegisterActionEnum.REGISTER_REQUEST, getDataRegister);\r\n}\r\n","import { ServerPort } from '../../config';\r\nimport { IUser } from '../../types/UserStore';\r\n\r\nexport const userGetInfoFetch = async (token: string): Promise<IUser> => {\r\n    const response = await fetch(ServerPort + '/user', {\r\n        method: 'GET',\r\n        headers: {\r\n            Authorization: 'Bearer ' + token,\r\n        },\r\n    });\r\n    const data: IUser = await response.json();\r\n    return data;\r\n};\r\n","import { ServerPort } from '../../config';\r\nimport { IUser } from '../../types/UserStore';\r\n\r\nexport const userDownloadAvatarFetch = async (formData: FormData, token: string) => {\r\n    const response = await fetch(ServerPort + '/downloadIcon', {\r\n        method: 'POST',\r\n        headers: {\r\n            Authorization: 'Bearer ' + token,\r\n        },\r\n        body: formData,\r\n    });\r\n    if (response.status !== 200) throw new Error();\r\n    const data: IUser = await response.json();\r\n    return data;\r\n};\r\n","import { call, put, takeEvery } from '@redux-saga/core/effects';\r\n\r\nimport { IUser, TUserDownloadAvatar, TUserGetInfo, UserActionEnum } from '../../types/UserStore';\r\nimport { userGetInfoFetch } from '../fetch/userGetInfoFetch';\r\nimport {\r\n    setFailedDownloadAvatar,\r\n    userGetInfoError,\r\n    userGetInfoSuccess,\r\n} from '../reducers/UserReducer';\r\nimport {\r\n    addNotification,\r\n    setMessageNotification,\r\n    setNewFrendNotification,\r\n} from '../reducers/NotificationReducer';\r\nimport io from '../../Socket';\r\nimport { clearAuth } from '../reducers/AuthReducer';\r\nimport { userDownloadAvatarFetch } from '../fetch/downloadAvatar';\r\n\r\nfunction* getUserData(getUserAction: TUserGetInfo) {\r\n    try {\r\n        const data: IUser = yield call(userGetInfoFetch.bind(null, getUserAction.payload));\r\n        yield put(userGetInfoSuccess(data));\r\n        if (data.unreadMessages.length > 0) {\r\n            yield put(setMessageNotification(data.unreadMessages));\r\n        }\r\n        if (data.unreadNotificationAplicationFrends.length > 0) {\r\n            yield put(addNotification(data.unreadNotificationAplicationFrends.length, false));\r\n        }\r\n        if (data.newNotificationFrends.length > 0) {\r\n            yield put(setNewFrendNotification(data.newNotificationFrends));\r\n        }\r\n        if (getUserAction.loading) io.emit('USER:JOIN_USER', data._id);\r\n    } catch {\r\n        yield put(userGetInfoError());\r\n    }\r\n}\r\n\r\nfunction* userOutput() {\r\n    localStorage.removeItem('token');\r\n    yield put(clearAuth());\r\n}\r\n\r\nfunction* userDownloadAvatar(downloadAvatarAction: TUserDownloadAvatar) {\r\n    try {\r\n        const { payload, token } = downloadAvatarAction;\r\n        const data: IUser = yield call(userDownloadAvatarFetch.bind(null, payload, token));\r\n        yield put(userGetInfoSuccess(data));\r\n    } catch (e) {\r\n        yield put(setFailedDownloadAvatar());\r\n    }\r\n}\r\n\r\nexport function* watcherUserSaga() {\r\n    yield takeEvery(UserActionEnum.USER_GET_INFO, getUserData);\r\n    yield takeEvery(UserActionEnum.USER_OUTPUT, userOutput);\r\n    yield takeEvery(UserActionEnum.USER_DOWNLOAD_AVATAR, userDownloadAvatar);\r\n}\r\n","import { all } from '@redux-saga/core/effects';\r\n\r\nimport { watcherAuthSaga } from './AuthAction';\r\nimport { watcherRegisterSaga } from './RegistesAction';\r\nimport { watcherUserSaga } from './UserAction';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([watcherRegisterSaga(), watcherAuthSaga(), watcherUserSaga()]);\r\n}\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootSaga from './action';\r\nimport { AuthReducer } from './reducers/AuthReducer';\r\nimport { RegisterReducer } from './reducers/RegisterReducer';\r\nimport { UserReducer } from './reducers/UserReducer';\r\nimport { NotificationReducer } from './reducers/NotificationReducer';\r\nimport { PagesMetadataReducer } from './reducers/PagesMetadataReducer';\r\n\r\nconst enhancers: Array<any> = [];\r\nconst globalReducer = combineReducers({\r\n    AuthReducer,\r\n    RegisterReducer,\r\n    UserReducer,\r\n    NotificationReducer,\r\n    PagesMetadataReducer,\r\n});\r\n\r\nexport type TRootState = ReturnType<typeof globalReducer>;\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    const devToolsExtension =\r\n        ((window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n            (window as any).__REDUX_DEVTOOLS_EXTENSION__()) ||\r\n        compose;\r\n    if (typeof devToolsExtension === 'function') {\r\n        enhancers.push(devToolsExtension);\r\n    }\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst composedEnhancers = compose(applyMiddleware(sagaMiddleware), ...enhancers);\r\n\r\nexport const store = createStore(globalReducer, composedEnhancers);\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport 'antd/dist/antd.min.css';\r\n\r\nimport App from './App';\r\nimport { store } from './store';\r\nimport './Socket';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}